{"ast":null,"code":"var _jsxFileName = \"A:\\\\Algorithm Visualiser\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nfunction App() {\n  _s();\n  const [array, setArray] = useState([]);\n  const [numBars, setNumBars] = useState(15);\n  const [isSorting, setIsSorting] = useState(false);\n  const [barStates, setBarStates] = useState({});\n\n  // Use useRef to track stop state for immediate access\n  const isStopRequested = useRef(false);\n\n  // Generate random array\n  const generateArray = useCallback(() => {\n    const newArray = [];\n    for (let i = 0; i < numBars; i++) {\n      newArray.push(Math.floor(Math.random() * 200) + 20);\n    }\n    setArray(newArray);\n    setBarStates({});\n  }, [numBars]);\n\n  // Initialize array on component mount\n  useEffect(() => {\n    generateArray();\n  }, [generateArray]);\n\n  // Update bar count\n  const updateBarCount = value => {\n    setNumBars(parseInt(value));\n  };\n\n  // Stop sorting\n  const stopSorting = () => {\n    isStopRequested.current = true;\n    setIsSorting(false);\n  };\n\n  // Reset visualization\n  const resetVisualization = () => {\n    isStopRequested.current = true;\n    setIsSorting(false);\n    setBarStates({});\n    setTimeout(() => {\n      generateArray();\n      isStopRequested.current = false;\n    }, 100);\n  };\n\n  // Bubble Sort\n  const bubbleSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    const newBarStates = {};\n    for (let i = 0; i < newArray.length - 1 && !isStopRequested.current; i++) {\n      for (let j = 0; j < newArray.length - i - 1 && !isStopRequested.current; j++) {\n        newBarStates[j] = 'comparing';\n        newBarStates[j + 1] = 'comparing';\n        setBarStates({\n          ...newBarStates\n        });\n        await sleep(100);\n        if (isStopRequested.current) break;\n        if (newArray[j] > newArray[j + 1]) {\n          [newArray[j], newArray[j + 1]] = [newArray[j + 1], newArray[j]];\n          setArray([...newArray]);\n        }\n        newBarStates[j] = '';\n        newBarStates[j + 1] = '';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n      if (!isStopRequested.current) {\n        newBarStates[newArray.length - 1 - i] = 'sorted';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n    }\n    if (!isStopRequested.current) {\n      newBarStates[0] = 'sorted';\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n\n  // Insertion Sort\n  const insertionSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    const newBarStates = {};\n    for (let i = 1; i < newArray.length && !isStopRequested.current; i++) {\n      let key = newArray[i];\n      let j = i - 1;\n      newBarStates[i] = 'current';\n      setBarStates({\n        ...newBarStates\n      });\n      await sleep(150);\n      if (isStopRequested.current) break;\n      while (j >= 0 && newArray[j] > key && !isStopRequested.current) {\n        newBarStates[j] = 'comparing';\n        setBarStates({\n          ...newBarStates\n        });\n        newArray[j + 1] = newArray[j];\n        setArray([...newArray]);\n        await sleep(100);\n        if (isStopRequested.current) break;\n        newBarStates[j] = '';\n        setBarStates({\n          ...newBarStates\n        });\n        j--;\n      }\n      if (!isStopRequested.current) {\n        newArray[j + 1] = key;\n        setArray([...newArray]);\n        newBarStates[i] = '';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n    }\n    if (!isStopRequested.current) {\n      for (let k = 0; k < newArray.length; k++) {\n        newBarStates[k] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n\n  // Selection Sort\n  const selectionSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    const newBarStates = {};\n    for (let i = 0; i < newArray.length && !isStopRequested.current; i++) {\n      let minIdx = i;\n      newBarStates[minIdx] = 'current';\n      setBarStates({\n        ...newBarStates\n      });\n      for (let j = i + 1; j < newArray.length && !isStopRequested.current; j++) {\n        newBarStates[j] = 'comparing';\n        setBarStates({\n          ...newBarStates\n        });\n        await sleep(100);\n        if (isStopRequested.current) break;\n        if (newArray[j] < newArray[minIdx]) {\n          newBarStates[minIdx] = '';\n          minIdx = j;\n          newBarStates[minIdx] = 'current';\n          setBarStates({\n            ...newBarStates\n          });\n        } else {\n          newBarStates[j] = '';\n          setBarStates({\n            ...newBarStates\n          });\n        }\n      }\n      if (!isStopRequested.current && minIdx !== i) {\n        [newArray[i], newArray[minIdx]] = [newArray[minIdx], newArray[i]];\n        setArray([...newArray]);\n      }\n      if (!isStopRequested.current) {\n        newBarStates[i] = 'sorted';\n        newBarStates[minIdx] = '';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n    }\n    setIsSorting(false);\n  };\n\n  // Quick Sort\n  const quickSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    await quickSortHelper(newArray, 0, newArray.length - 1);\n    if (!isStopRequested.current) {\n      const newBarStates = {};\n      for (let i = 0; i < newArray.length; i++) {\n        newBarStates[i] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n  const quickSortHelper = async (arr, low, high) => {\n    if (isStopRequested.current) return;\n    if (low < high && !isStopRequested.current) {\n      let pi = await partition(arr, low, high);\n      await quickSortHelper(arr, low, pi - 1);\n      await quickSortHelper(arr, pi + 1, high);\n    }\n  };\n  const partition = async (arr, low, high) => {\n    if (isStopRequested.current) return low;\n    let pivot = arr[high];\n    let i = low - 1;\n    for (let j = low; j < high && !isStopRequested.current; j++) {\n      setBarStates(prev => ({\n        ...prev,\n        [j]: 'comparing',\n        [high]: 'current'\n      }));\n      await sleep(150);\n      if (isStopRequested.current) break;\n      if (arr[j] < pivot) {\n        i++;\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n        setArray([...arr]);\n      }\n      setBarStates(prev => ({\n        ...prev,\n        [j]: ''\n      }));\n    }\n    if (!isStopRequested.current) {\n      [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n      setArray([...arr]);\n      setBarStates(prev => ({\n        ...prev,\n        [high]: ''\n      }));\n    }\n    return i + 1;\n  };\n\n  // Merge Sort\n  const mergeSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    await mergeSortHelper(newArray, 0, newArray.length - 1);\n    if (!isStopRequested.current) {\n      const newBarStates = {};\n      for (let i = 0; i < newArray.length; i++) {\n        newBarStates[i] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n  const mergeSortHelper = async (arr, start, end) => {\n    if (isStopRequested.current) return;\n    if (start < end && !isStopRequested.current) {\n      let mid = Math.floor((start + end) / 2);\n      await mergeSortHelper(arr, start, mid);\n      await mergeSortHelper(arr, mid + 1, end);\n      await merge(arr, start, mid, end);\n    }\n  };\n  const merge = async (arr, start, mid, end) => {\n    if (isStopRequested.current) return;\n    let left = arr.slice(start, mid + 1);\n    let right = arr.slice(mid + 1, end + 1);\n    let i = 0,\n      j = 0,\n      k = start;\n    while (i < left.length && j < right.length && !isStopRequested.current) {\n      setBarStates(prev => ({\n        ...prev,\n        [k]: 'comparing'\n      }));\n      await sleep(150);\n      if (isStopRequested.current) break;\n      if (left[i] <= right[j]) {\n        arr[k] = left[i++];\n      } else {\n        arr[k] = right[j++];\n      }\n      setArray([...arr]);\n      setBarStates(prev => ({\n        ...prev,\n        [k]: ''\n      }));\n      k++;\n    }\n    while (i < left.length && !isStopRequested.current) {\n      arr[k] = left[i++];\n      setArray([...arr]);\n      k++;\n      await sleep(100);\n    }\n    while (j < right.length && !isStopRequested.current) {\n      arr[k] = right[j++];\n      setArray([...arr]);\n      k++;\n      await sleep(100);\n    }\n  };\n\n  // Heap Sort\n  const heapSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    let n = newArray.length;\n\n    // Build heap\n    for (let i = Math.floor(n / 2) - 1; i >= 0 && !isStopRequested.current; i--) {\n      await heapify(newArray, n, i);\n    }\n\n    // Extract elements from heap\n    for (let i = n - 1; i > 0 && !isStopRequested.current; i--) {\n      [newArray[0], newArray[i]] = [newArray[i], newArray[0]];\n      setArray([...newArray]);\n      if (!isStopRequested.current) {\n        setBarStates(prev => ({\n          ...prev,\n          [i]: 'sorted'\n        }));\n        await heapify(newArray, i, 0);\n      }\n    }\n    if (!isStopRequested.current) {\n      setBarStates(prev => ({\n        ...prev,\n        [0]: 'sorted'\n      }));\n    }\n    setIsSorting(false);\n  };\n  const heapify = async (arr, n, i) => {\n    if (isStopRequested.current) return;\n    let largest = i;\n    let l = 2 * i + 1;\n    let r = 2 * i + 2;\n    if (l < n && arr[l] > arr[largest]) largest = l;\n    if (r < n && arr[r] > arr[largest]) largest = r;\n    if (largest !== i && !isStopRequested.current) {\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      setArray([...arr]);\n      setBarStates(prev => ({\n        ...prev,\n        [i]: 'comparing',\n        [largest]: 'comparing'\n      }));\n      await sleep(150);\n      if (!isStopRequested.current) {\n        setBarStates(prev => ({\n          ...prev,\n          [i]: '',\n          [largest]: ''\n        }));\n        await heapify(arr, n, largest);\n      }\n    }\n  };\n\n  // Shell Sort\n  const shellSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    let n = newArray.length;\n    let gap = Math.floor(n / 2);\n    while (gap > 0 && !isStopRequested.current) {\n      for (let i = gap; i < n && !isStopRequested.current; i++) {\n        let temp = newArray[i];\n        let j = i;\n        setBarStates(prev => ({\n          ...prev,\n          [i]: 'current'\n        }));\n        await sleep(150);\n        while (j >= gap && newArray[j - gap] > temp && !isStopRequested.current) {\n          setBarStates(prev => ({\n            ...prev,\n            [j - gap]: 'comparing'\n          }));\n          newArray[j] = newArray[j - gap];\n          setArray([...newArray]);\n          await sleep(100);\n          setBarStates(prev => ({\n            ...prev,\n            [j - gap]: ''\n          }));\n          j -= gap;\n        }\n        if (!isStopRequested.current) {\n          newArray[j] = temp;\n          setArray([...newArray]);\n          setBarStates(prev => ({\n            ...prev,\n            [i]: ''\n          }));\n        }\n      }\n      gap = Math.floor(gap / 2);\n    }\n    if (!isStopRequested.current) {\n      const newBarStates = {};\n      for (let k = 0; k < newArray.length; k++) {\n        newBarStates[k] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n\n  // Start sorting based on algorithm\n  const startSorting = async algorithm => {\n    if (isSorting) {\n      alert(\"Sorting is already in progress!\");\n      return;\n    }\n    if (!array || array.length === 0) {\n      alert(\"Please generate an array first!\");\n      return;\n    }\n    switch (algorithm) {\n      case \"bubble\":\n        await bubbleSort();\n        break;\n      case \"insertion\":\n        await insertionSort();\n        break;\n      case \"selection\":\n        await selectionSort();\n        break;\n      case \"quick\":\n        await quickSort();\n        break;\n      case \"merge\":\n        await mergeSort();\n        break;\n      case \"heap\":\n        await heapSort();\n        break;\n      case \"shell\":\n        await shellSort();\n        break;\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      minHeight: '100vh',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      style: {\n        backgroundColor: '#333',\n        color: 'white',\n        padding: '1rem',\n        textAlign: 'center',\n        fontSize: '1.5rem',\n        fontWeight: 'bold'\n      },\n      children: \"AlgoWorks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: 'center',\n          color: '#333'\n        },\n        children: \"Sorting Algorithm Visualiser\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px',\n          textAlign: 'center',\n          backgroundColor: '#f5f5f5',\n          padding: '20px',\n          borderRadius: '8px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"barCount\",\n          style: {\n            marginRight: '10px',\n            fontWeight: 'bold'\n          },\n          children: \"Bars:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          id: \"barCount\",\n          min: \"5\",\n          max: \"50\",\n          value: numBars,\n          onChange: e => updateBarCount(e.target.value),\n          disabled: isSorting,\n          style: {\n            margin: '0 10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: numBars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '10px',\n            justifyContent: 'center',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => startSorting('quick'),\n            disabled: isSorting,\n            style: {\n              padding: '8px 16px',\n              backgroundColor: '#007bff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: isSorting ? 'not-allowed' : 'pointer',\n              opacity: isSorting ? 0.6 : 1\n            },\n            children: \"Quick Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => startSorting('bubble'),\n            disabled: isSorting,\n            style: {\n              padding: '8px 16px',\n              backgroundColor: '#28a745',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: isSorting ? 'not-allowed' : 'pointer',\n              opacity: isSorting ? 0.6 : 1\n            },\n            children: \"Bubble Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => startSorting('insertion'),\n            disabled: isSorting,\n            style: {\n              padding: '8px 16px',\n              backgroundColor: '#ffc107',\n              color: 'black',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: isSorting ? 'not-allowed' : 'pointer',\n              opacity: isSorting ? 0.6 : 1\n            },\n            children: \"Insertion Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => startSorting('selection'),\n            disabled: isSorting,\n            style: {\n              padding: '8px 16px',\n              backgroundColor: '#dc3545',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: isSorting ? 'not-allowed' : 'pointer',\n              opacity: isSorting ? 0.6 : 1\n            },\n            children: \"Selection Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => startSorting('heap'),\n            disabled: isSorting,\n            style: {\n              padding: '8px 16px',\n              backgroundColor: '#6f42c1',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: isSorting ? 'not-allowed' : 'pointer',\n              opacity: isSorting ? 0.6 : 1\n            },\n            children: \"Heap Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => startSorting('merge'),\n            disabled: isSorting,\n            style: {\n              padding: '8px 16px',\n              backgroundColor: '#20c997',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: isSorting ? 'not-allowed' : 'pointer',\n              opacity: isSorting ? 0.6 : 1\n            },\n            children: \"Merge Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => startSorting('shell'),\n            disabled: isSorting,\n            style: {\n              padding: '8px 16px',\n              backgroundColor: '#fd7e14',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: isSorting ? 'not-allowed' : 'pointer',\n              opacity: isSorting ? 0.6 : 1\n            },\n            children: \"Shell Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'flex-end',\n          height: '300px',\n          backgroundColor: '#f8f9fa',\n          border: '2px solid #dee2e6',\n          borderRadius: '8px',\n          padding: '20px',\n          marginBottom: '20px'\n        },\n        children: array.map((value, index) => {\n          let barColor = '#6c757d';\n          if (barStates[index] === 'comparing') barColor = '#dc3545';\n          if (barStates[index] === 'current') barColor = '#ffc107';\n          if (barStates[index] === 'sorted') barColor = '#28a745';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `${value}px`,\n              width: `${Math.max(20, 400 / numBars)}px`,\n              backgroundColor: barColor,\n              margin: '0 1px',\n              display: 'flex',\n              alignItems: 'flex-end',\n              justifyContent: 'center',\n              color: 'white',\n              fontSize: '10px',\n              fontWeight: 'bold',\n              paddingBottom: '2px',\n              borderRadius: '2px 2px 0 0',\n              transition: 'all 0.3s ease'\n            },\n            children: numBars <= 20 ? value : ''\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          display: 'flex',\n          gap: '10px',\n          justifyContent: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: generateArray,\n          disabled: isSorting,\n          style: {\n            padding: '10px 20px',\n            backgroundColor: '#17a2b8',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: isSorting ? 'not-allowed' : 'pointer',\n            opacity: isSorting ? 0.6 : 1,\n            fontSize: '16px'\n          },\n          children: \"Generate Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopSorting,\n          disabled: !isSorting,\n          style: {\n            padding: '10px 20px',\n            backgroundColor: '#dc3545',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: !isSorting ? 'not-allowed' : 'pointer',\n            opacity: !isSorting ? 0.6 : 1,\n            fontSize: '16px'\n          },\n          children: \"Stop Sorting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetVisualization,\n          style: {\n            padding: '10px 20px',\n            backgroundColor: '#6c757d',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '16px'\n          },\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px',\n          textAlign: 'center',\n          backgroundColor: '#e9ecef',\n          padding: '15px',\n          borderRadius: '8px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Legend:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'center',\n            gap: '20px',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '5px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '20px',\n                height: '20px',\n                backgroundColor: '#6c757d'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Unsorted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '5px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '20px',\n                height: '20px',\n                backgroundColor: '#dc3545'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Comparing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 729,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '5px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '20px',\n                height: '20px',\n                backgroundColor: '#ffc107'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 732,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Current/Pivot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '5px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '20px',\n                height: '20px',\n                backgroundColor: '#28a745'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Sorted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 737,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 475,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xpQZ7gOg5pDHcD0v/+Z9LY6bZn0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","jsxDEV","_jsxDEV","sleep","ms","Promise","resolve","setTimeout","App","_s","array","setArray","numBars","setNumBars","isSorting","setIsSorting","barStates","setBarStates","isStopRequested","generateArray","newArray","i","push","Math","floor","random","updateBarCount","value","parseInt","stopSorting","current","resetVisualization","bubbleSort","newBarStates","length","j","insertionSort","key","k","selectionSort","minIdx","quickSort","quickSortHelper","arr","low","high","pi","partition","pivot","prev","mergeSort","mergeSortHelper","start","end","mid","merge","left","slice","right","heapSort","n","heapify","largest","l","r","shellSort","gap","temp","startSorting","algorithm","alert","style","minHeight","fontFamily","children","backgroundColor","color","padding","textAlign","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","borderRadius","htmlFor","marginRight","type","id","min","max","onChange","e","target","disabled","margin","display","justifyContent","flexWrap","onClick","border","cursor","opacity","alignItems","height","map","index","barColor","width","paddingBottom","transition","marginTop","_c","$RefreshReg$"],"sources":["A:/Algorithm Visualiser/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\n\r\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nfunction App() {\r\n  const [array, setArray] = useState([]);\r\n  const [numBars, setNumBars] = useState(15);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [barStates, setBarStates] = useState({});\r\n  \r\n  // Use useRef to track stop state for immediate access\r\n  const isStopRequested = useRef(false);\r\n\r\n  // Generate random array\r\n  const generateArray = useCallback(() => {\r\n    const newArray = [];\r\n    for (let i = 0; i < numBars; i++) {\r\n      newArray.push(Math.floor(Math.random() * 200) + 20);\r\n    }\r\n    setArray(newArray);\r\n    setBarStates({});\r\n  }, [numBars]);\r\n\r\n  // Initialize array on component mount\r\n  useEffect(() => {\r\n    generateArray();\r\n  }, [generateArray]);\r\n\r\n  // Update bar count\r\n  const updateBarCount = (value) => {\r\n    setNumBars(parseInt(value));\r\n  };\r\n\r\n  // Stop sorting\r\n  const stopSorting = () => {\r\n    isStopRequested.current = true;\r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Reset visualization\r\n  const resetVisualization = () => {\r\n    isStopRequested.current = true;\r\n    setIsSorting(false);\r\n    setBarStates({});\r\n    setTimeout(() => {\r\n      generateArray();\r\n      isStopRequested.current = false;\r\n    }, 100);\r\n  };\r\n\r\n  // Bubble Sort\r\n  const bubbleSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    const newBarStates = {};\r\n\r\n    for (let i = 0; i < newArray.length - 1 && !isStopRequested.current; i++) {\r\n      for (let j = 0; j < newArray.length - i - 1 && !isStopRequested.current; j++) {\r\n        newBarStates[j] = 'comparing';\r\n        newBarStates[j + 1] = 'comparing';\r\n        setBarStates({ ...newBarStates });\r\n        \r\n        await sleep(100);\r\n        \r\n        if (isStopRequested.current) break;\r\n\r\n        if (newArray[j] > newArray[j + 1]) {\r\n          [newArray[j], newArray[j + 1]] = [newArray[j + 1], newArray[j]];\r\n          setArray([...newArray]);\r\n        }\r\n\r\n        newBarStates[j] = '';\r\n        newBarStates[j + 1] = '';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n      if (!isStopRequested.current) {\r\n        newBarStates[newArray.length - 1 - i] = 'sorted';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      newBarStates[0] = 'sorted';\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Insertion Sort\r\n  const insertionSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    const newBarStates = {};\r\n\r\n    for (let i = 1; i < newArray.length && !isStopRequested.current; i++) {\r\n      let key = newArray[i];\r\n      let j = i - 1;\r\n\r\n      newBarStates[i] = 'current';\r\n      setBarStates({ ...newBarStates });\r\n      await sleep(150);\r\n      \r\n      if (isStopRequested.current) break;\r\n\r\n      while (j >= 0 && newArray[j] > key && !isStopRequested.current) {\r\n        newBarStates[j] = 'comparing';\r\n        setBarStates({ ...newBarStates });\r\n        \r\n        newArray[j + 1] = newArray[j];\r\n        setArray([...newArray]);\r\n        await sleep(100);\r\n        \r\n        if (isStopRequested.current) break;\r\n        \r\n        newBarStates[j] = '';\r\n        setBarStates({ ...newBarStates });\r\n        j--;\r\n      }\r\n\r\n      if (!isStopRequested.current) {\r\n        newArray[j + 1] = key;\r\n        setArray([...newArray]);\r\n        newBarStates[i] = '';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      for (let k = 0; k < newArray.length; k++) {\r\n        newBarStates[k] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Selection Sort\r\n  const selectionSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    const newBarStates = {};\r\n\r\n    for (let i = 0; i < newArray.length && !isStopRequested.current; i++) {\r\n      let minIdx = i;\r\n      newBarStates[minIdx] = 'current';\r\n      setBarStates({ ...newBarStates });\r\n\r\n      for (let j = i + 1; j < newArray.length && !isStopRequested.current; j++) {\r\n        newBarStates[j] = 'comparing';\r\n        setBarStates({ ...newBarStates });\r\n        await sleep(100);\r\n        \r\n        if (isStopRequested.current) break;\r\n\r\n        if (newArray[j] < newArray[minIdx]) {\r\n          newBarStates[minIdx] = '';\r\n          minIdx = j;\r\n          newBarStates[minIdx] = 'current';\r\n          setBarStates({ ...newBarStates });\r\n        } else {\r\n          newBarStates[j] = '';\r\n          setBarStates({ ...newBarStates });\r\n        }\r\n      }\r\n\r\n      if (!isStopRequested.current && minIdx !== i) {\r\n        [newArray[i], newArray[minIdx]] = [newArray[minIdx], newArray[i]];\r\n        setArray([...newArray]);\r\n      }\r\n\r\n      if (!isStopRequested.current) {\r\n        newBarStates[i] = 'sorted';\r\n        newBarStates[minIdx] = '';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Quick Sort\r\n  const quickSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    await quickSortHelper(newArray, 0, newArray.length - 1);\r\n    \r\n    if (!isStopRequested.current) {\r\n      const newBarStates = {};\r\n      for (let i = 0; i < newArray.length; i++) {\r\n        newBarStates[i] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  const quickSortHelper = async (arr, low, high) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    if (low < high && !isStopRequested.current) {\r\n      let pi = await partition(arr, low, high);\r\n      await quickSortHelper(arr, low, pi - 1);\r\n      await quickSortHelper(arr, pi + 1, high);\r\n    }\r\n  };\r\n\r\n  const partition = async (arr, low, high) => {\r\n    if (isStopRequested.current) return low;\r\n    \r\n    let pivot = arr[high];\r\n    let i = low - 1;\r\n\r\n    for (let j = low; j < high && !isStopRequested.current; j++) {\r\n      setBarStates(prev => ({ ...prev, [j]: 'comparing', [high]: 'current' }));\r\n      await sleep(150);\r\n      \r\n      if (isStopRequested.current) break;\r\n\r\n      if (arr[j] < pivot) {\r\n        i++;\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n        setArray([...arr]);\r\n      }\r\n\r\n      setBarStates(prev => ({ ...prev, [j]: '' }));\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\r\n      setArray([...arr]);\r\n      setBarStates(prev => ({ ...prev, [high]: '' }));\r\n    }\r\n\r\n    return i + 1;\r\n  };\r\n\r\n  // Merge Sort\r\n  const mergeSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    await mergeSortHelper(newArray, 0, newArray.length - 1);\r\n    \r\n    if (!isStopRequested.current) {\r\n      const newBarStates = {};\r\n      for (let i = 0; i < newArray.length; i++) {\r\n        newBarStates[i] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  const mergeSortHelper = async (arr, start, end) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    if (start < end && !isStopRequested.current) {\r\n      let mid = Math.floor((start + end) / 2);\r\n      await mergeSortHelper(arr, start, mid);\r\n      await mergeSortHelper(arr, mid + 1, end);\r\n      await merge(arr, start, mid, end);\r\n    }\r\n  };\r\n\r\n  const merge = async (arr, start, mid, end) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    let left = arr.slice(start, mid + 1);\r\n    let right = arr.slice(mid + 1, end + 1);\r\n\r\n    let i = 0, j = 0, k = start;\r\n\r\n    while (i < left.length && j < right.length && !isStopRequested.current) {\r\n      setBarStates(prev => ({ ...prev, [k]: 'comparing' }));\r\n      await sleep(150);\r\n      \r\n      if (isStopRequested.current) break;\r\n\r\n      if (left[i] <= right[j]) {\r\n        arr[k] = left[i++];\r\n      } else {\r\n        arr[k] = right[j++];\r\n      }\r\n\r\n      setArray([...arr]);\r\n      setBarStates(prev => ({ ...prev, [k]: '' }));\r\n      k++;\r\n    }\r\n\r\n    while (i < left.length && !isStopRequested.current) {\r\n      arr[k] = left[i++];\r\n      setArray([...arr]);\r\n      k++;\r\n      await sleep(100);\r\n    }\r\n\r\n    while (j < right.length && !isStopRequested.current) {\r\n      arr[k] = right[j++];\r\n      setArray([...arr]);\r\n      k++;\r\n      await sleep(100);\r\n    }\r\n  };\r\n\r\n  // Heap Sort\r\n  const heapSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    let n = newArray.length;\r\n\r\n    // Build heap\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0 && !isStopRequested.current; i--) {\r\n      await heapify(newArray, n, i);\r\n    }\r\n\r\n    // Extract elements from heap\r\n    for (let i = n - 1; i > 0 && !isStopRequested.current; i--) {\r\n      [newArray[0], newArray[i]] = [newArray[i], newArray[0]];\r\n      setArray([...newArray]);\r\n\r\n      if (!isStopRequested.current) {\r\n        setBarStates(prev => ({ ...prev, [i]: 'sorted' }));\r\n        await heapify(newArray, i, 0);\r\n      }\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      setBarStates(prev => ({ ...prev, [0]: 'sorted' }));\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  const heapify = async (arr, n, i) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    let largest = i;\r\n    let l = 2 * i + 1;\r\n    let r = 2 * i + 2;\r\n\r\n    if (l < n && arr[l] > arr[largest]) largest = l;\r\n    if (r < n && arr[r] > arr[largest]) largest = r;\r\n\r\n    if (largest !== i && !isStopRequested.current) {\r\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\r\n      setArray([...arr]);\r\n      \r\n      setBarStates(prev => ({ \r\n        ...prev, \r\n        [i]: 'comparing', \r\n        [largest]: 'comparing' \r\n      }));\r\n\r\n      await sleep(150);\r\n      \r\n      if (!isStopRequested.current) {\r\n        setBarStates(prev => ({ \r\n          ...prev, \r\n          [i]: '', \r\n          [largest]: '' \r\n        }));\r\n        await heapify(arr, n, largest);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Shell Sort\r\n  const shellSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    let n = newArray.length;\r\n    let gap = Math.floor(n / 2);\r\n\r\n    while (gap > 0 && !isStopRequested.current) {\r\n      for (let i = gap; i < n && !isStopRequested.current; i++) {\r\n        let temp = newArray[i];\r\n        let j = i;\r\n\r\n        setBarStates(prev => ({ ...prev, [i]: 'current' }));\r\n        await sleep(150);\r\n\r\n        while (j >= gap && newArray[j - gap] > temp && !isStopRequested.current) {\r\n          setBarStates(prev => ({ ...prev, [j - gap]: 'comparing' }));\r\n          newArray[j] = newArray[j - gap];\r\n          setArray([...newArray]);\r\n          await sleep(100);\r\n          setBarStates(prev => ({ ...prev, [j - gap]: '' }));\r\n          j -= gap;\r\n        }\r\n\r\n        if (!isStopRequested.current) {\r\n          newArray[j] = temp;\r\n          setArray([...newArray]);\r\n          setBarStates(prev => ({ ...prev, [i]: '' }));\r\n        }\r\n      }\r\n      gap = Math.floor(gap / 2);\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      const newBarStates = {};\r\n      for (let k = 0; k < newArray.length; k++) {\r\n        newBarStates[k] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n\r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Start sorting based on algorithm\r\n  const startSorting = async (algorithm) => {\r\n    if (isSorting) {\r\n      alert(\"Sorting is already in progress!\");\r\n      return;\r\n    }\r\n    \r\n    if (!array || array.length === 0) {\r\n      alert(\"Please generate an array first!\");\r\n      return;\r\n    }\r\n    \r\n    switch (algorithm) {\r\n      case \"bubble\":\r\n        await bubbleSort();\r\n        break;\r\n      case \"insertion\":\r\n        await insertionSort();\r\n        break;\r\n      case \"selection\":\r\n        await selectionSort();\r\n        break;\r\n      case \"quick\":\r\n        await quickSort();\r\n        break;\r\n      case \"merge\":\r\n        await mergeSort();\r\n        break;\r\n      case \"heap\":\r\n        await heapSort();\r\n        break;\r\n      case \"shell\":\r\n        await shellSort();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ minHeight: '100vh', fontFamily: 'Arial, sans-serif' }}>\r\n      <nav style={{ \r\n        backgroundColor: '#333', \r\n        color: 'white', \r\n        padding: '1rem', \r\n        textAlign: 'center',\r\n        fontSize: '1.5rem',\r\n        fontWeight: 'bold'\r\n      }}>\r\n        AlgoWorks\r\n      </nav>\r\n\r\n      <div style={{ padding: '20px' }}>\r\n        <h1 style={{ textAlign: 'center', color: '#333' }}>Sorting Algorithm Visualiser</h1>\r\n\r\n        <div style={{ \r\n          marginBottom: '20px', \r\n          textAlign: 'center',\r\n          backgroundColor: '#f5f5f5',\r\n          padding: '20px',\r\n          borderRadius: '8px'\r\n        }}>\r\n          <label htmlFor=\"barCount\" style={{ marginRight: '10px', fontWeight: 'bold' }}>\r\n            Bars: \r\n          </label>\r\n          <input \r\n            type=\"range\" \r\n            id=\"barCount\" \r\n            min=\"5\" \r\n            max=\"50\" \r\n            value={numBars} \r\n            onChange={(e) => updateBarCount(e.target.value)}\r\n            disabled={isSorting}\r\n            style={{ margin: '0 10px' }}\r\n          />\r\n          <span style={{ fontWeight: 'bold' }}>{numBars}</span>\r\n          \r\n          <br /><br />\r\n\r\n          <div style={{ display: 'flex', gap: '10px', justifyContent: 'center', flexWrap: 'wrap' }}>\r\n            <button \r\n              onClick={() => startSorting('quick')} \r\n              disabled={isSorting}\r\n              style={{ \r\n                padding: '8px 16px', \r\n                backgroundColor: '#007bff', \r\n                color: 'white', \r\n                border: 'none', \r\n                borderRadius: '4px',\r\n                cursor: isSorting ? 'not-allowed' : 'pointer',\r\n                opacity: isSorting ? 0.6 : 1\r\n              }}\r\n            >\r\n              Quick Sort\r\n            </button>\r\n            <button \r\n              onClick={() => startSorting('bubble')} \r\n              disabled={isSorting}\r\n              style={{ \r\n                padding: '8px 16px', \r\n                backgroundColor: '#28a745', \r\n                color: 'white', \r\n                border: 'none', \r\n                borderRadius: '4px',\r\n                cursor: isSorting ? 'not-allowed' : 'pointer',\r\n                opacity: isSorting ? 0.6 : 1\r\n              }}\r\n            >\r\n              Bubble Sort\r\n            </button>\r\n            <button \r\n              onClick={() => startSorting('insertion')} \r\n              disabled={isSorting}\r\n              style={{ \r\n                padding: '8px 16px', \r\n                backgroundColor: '#ffc107', \r\n                color: 'black', \r\n                border: 'none', \r\n                borderRadius: '4px',\r\n                cursor: isSorting ? 'not-allowed' : 'pointer',\r\n                opacity: isSorting ? 0.6 : 1\r\n              }}\r\n            >\r\n              Insertion Sort\r\n            </button>\r\n            <button \r\n              onClick={() => startSorting('selection')} \r\n              disabled={isSorting}\r\n              style={{ \r\n                padding: '8px 16px', \r\n                backgroundColor: '#dc3545', \r\n                color: 'white', \r\n                border: 'none', \r\n                borderRadius: '4px',\r\n                cursor: isSorting ? 'not-allowed' : 'pointer',\r\n                opacity: isSorting ? 0.6 : 1\r\n              }}\r\n            >\r\n              Selection Sort\r\n            </button>\r\n            <button \r\n              onClick={() => startSorting('heap')} \r\n              disabled={isSorting}\r\n              style={{ \r\n                padding: '8px 16px', \r\n                backgroundColor: '#6f42c1', \r\n                color: 'white', \r\n                border: 'none', \r\n                borderRadius: '4px',\r\n                cursor: isSorting ? 'not-allowed' : 'pointer',\r\n                opacity: isSorting ? 0.6 : 1\r\n              }}\r\n            >\r\n              Heap Sort\r\n            </button>\r\n            <button \r\n              onClick={() => startSorting('merge')} \r\n              disabled={isSorting}\r\n              style={{ \r\n                padding: '8px 16px', \r\n                backgroundColor: '#20c997', \r\n                color: 'white', \r\n                border: 'none', \r\n                borderRadius: '4px',\r\n                cursor: isSorting ? 'not-allowed' : 'pointer',\r\n                opacity: isSorting ? 0.6 : 1\r\n              }}\r\n            >\r\n              Merge Sort\r\n            </button>\r\n            <button \r\n              onClick={() => startSorting('shell')} \r\n              disabled={isSorting}\r\n              style={{ \r\n                padding: '8px 16px', \r\n                backgroundColor: '#fd7e14', \r\n                color: 'white', \r\n                border: 'none', \r\n                borderRadius: '4px',\r\n                cursor: isSorting ? 'not-allowed' : 'pointer',\r\n                opacity: isSorting ? 0.6 : 1\r\n              }}\r\n            >\r\n              Shell Sort\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'center', \r\n          alignItems: 'flex-end', \r\n          height: '300px',\r\n          backgroundColor: '#f8f9fa',\r\n          border: '2px solid #dee2e6',\r\n          borderRadius: '8px',\r\n          padding: '20px',\r\n          marginBottom: '20px'\r\n        }}>\r\n          {array.map((value, index) => {\r\n            let barColor = '#6c757d';\r\n            if (barStates[index] === 'comparing') barColor = '#dc3545';\r\n            if (barStates[index] === 'current') barColor = '#ffc107';\r\n            if (barStates[index] === 'sorted') barColor = '#28a745';\r\n            \r\n            return (\r\n              <div\r\n                key={index}\r\n                style={{ \r\n                  height: `${value}px`,\r\n                  width: `${Math.max(20, 400 / numBars)}px`,\r\n                  backgroundColor: barColor,\r\n                  margin: '0 1px',\r\n                  display: 'flex',\r\n                  alignItems: 'flex-end',\r\n                  justifyContent: 'center',\r\n                  color: 'white',\r\n                  fontSize: '10px',\r\n                  fontWeight: 'bold',\r\n                  paddingBottom: '2px',\r\n                  borderRadius: '2px 2px 0 0',\r\n                  transition: 'all 0.3s ease'\r\n                }}\r\n              >\r\n                {numBars <= 20 ? value : ''}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <div style={{ textAlign: 'center', display: 'flex', gap: '10px', justifyContent: 'center' }}>\r\n          <button \r\n            onClick={generateArray} \r\n            disabled={isSorting}\r\n            style={{ \r\n              padding: '10px 20px', \r\n              backgroundColor: '#17a2b8', \r\n              color: 'white', \r\n              border: 'none', \r\n              borderRadius: '4px',\r\n              cursor: isSorting ? 'not-allowed' : 'pointer',\r\n              opacity: isSorting ? 0.6 : 1,\r\n              fontSize: '16px'\r\n            }}\r\n          >\r\n            Generate Array\r\n          </button>\r\n          <button \r\n            onClick={stopSorting} \r\n            disabled={!isSorting}\r\n            style={{ \r\n              padding: '10px 20px', \r\n              backgroundColor: '#dc3545', \r\n              color: 'white', \r\n              border: 'none', \r\n              borderRadius: '4px',\r\n              cursor: !isSorting ? 'not-allowed' : 'pointer',\r\n              opacity: !isSorting ? 0.6 : 1,\r\n              fontSize: '16px'\r\n            }}\r\n          >\r\n            Stop Sorting\r\n          </button>\r\n          <button \r\n            onClick={resetVisualization}\r\n            style={{ \r\n              padding: '10px 20px', \r\n              backgroundColor: '#6c757d', \r\n              color: 'white', \r\n              border: 'none', \r\n              borderRadius: '4px',\r\n              cursor: 'pointer',\r\n              fontSize: '16px'\r\n            }}\r\n          >\r\n            Reset\r\n          </button>\r\n        </div>\r\n\r\n        <div style={{ \r\n          marginTop: '20px', \r\n          textAlign: 'center',\r\n          backgroundColor: '#e9ecef',\r\n          padding: '15px',\r\n          borderRadius: '8px'\r\n        }}>\r\n          <h3>Legend:</h3>\r\n          <div style={{ display: 'flex', justifyContent: 'center', gap: '20px', flexWrap: 'wrap' }}>\r\n            <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\r\n              <div style={{ width: '20px', height: '20px', backgroundColor: '#6c757d' }}></div>\r\n              <span>Unsorted</span>\r\n            </div>\r\n            <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\r\n              <div style={{ width: '20px', height: '20px', backgroundColor: '#dc3545' }}></div>\r\n              <span>Comparing</span>\r\n            </div>\r\n            <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\r\n              <div style={{ width: '20px', height: '20px', backgroundColor: '#ffc107' }}></div>\r\n              <span>Current/Pivot</span>\r\n            </div>\r\n            <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>\r\n              <div style={{ width: '20px', height: '20px', backgroundColor: '#28a745' }}></div>\r\n              <span>Sorted</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}