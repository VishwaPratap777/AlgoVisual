{"ast":null,"code":"var _jsxFileName = \"A:\\\\Algorithm Visualiser\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport SearchVisualizer from './SearchVisualizer';\nimport Navbar from './Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nfunction App() {\n  _s();\n  const [currentSection, setCurrentSection] = useState('sorting');\n  const [array, setArray] = useState([]);\n  const [numBars, setNumBars] = useState(15);\n  const [isSorting, setIsSorting] = useState(false);\n  const [barStates, setBarStates] = useState({});\n\n  // Navbar scroll states\n  const [navbarHidden, setNavbarHidden] = useState(false);\n  const [navbarScrolled, setNavbarScrolled] = useState(false);\n  const isStopRequested = useRef(false);\n\n  // Navbar scroll animation effect\n  useEffect(() => {\n    let lastScrollTop = 0;\n    let ticking = false;\n    const updateNavbar = () => {\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n      if (scrollTop > lastScrollTop && scrollTop > 100) {\n        // Scrolling down & past threshold\n        setNavbarHidden(true);\n      } else if (scrollTop < lastScrollTop || scrollTop <= 100) {\n        // Scrolling up or at top\n        setNavbarHidden(false);\n      }\n\n      // Add scrolled state for enhanced styling\n      setNavbarScrolled(scrollTop > 50);\n      lastScrollTop = scrollTop;\n      ticking = false;\n    };\n    const requestTick = () => {\n      if (!ticking) {\n        requestAnimationFrame(updateNavbar);\n        ticking = true;\n      }\n    };\n    window.addEventListener('scroll', requestTick);\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('scroll', requestTick);\n    };\n  }, []);\n\n  // Generate random array\n  const generateArray = useCallback(() => {\n    const newArray = [];\n    for (let i = 0; i < numBars; i++) {\n      newArray.push(Math.floor(Math.random() * 200) + 20);\n    }\n    setArray(newArray);\n    setBarStates({});\n  }, [numBars]);\n\n  // Initialize array on component mount\n  useEffect(() => {\n    generateArray();\n  }, [generateArray]);\n\n  // Update bar count\n  const updateBarCount = value => {\n    setNumBars(parseInt(value));\n  };\n\n  // Stop sorting\n  const stopSorting = () => {\n    isStopRequested.current = true;\n    setIsSorting(false);\n  };\n\n  // Reset visualization\n  const resetVisualization = () => {\n    isStopRequested.current = true;\n    setIsSorting(false);\n    setBarStates({});\n    setTimeout(() => {\n      generateArray();\n      isStopRequested.current = false;\n    }, 100);\n  };\n\n  // Bubble Sort\n  const bubbleSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    const newBarStates = {};\n    for (let i = 0; i < newArray.length - 1 && !isStopRequested.current; i++) {\n      for (let j = 0; j < newArray.length - i - 1 && !isStopRequested.current; j++) {\n        newBarStates[j] = 'comparing';\n        newBarStates[j + 1] = 'comparing';\n        setBarStates({\n          ...newBarStates\n        });\n        await sleep(100);\n        if (isStopRequested.current) break;\n        if (newArray[j] > newArray[j + 1]) {\n          [newArray[j], newArray[j + 1]] = [newArray[j + 1], newArray[j]];\n          setArray([...newArray]);\n        }\n        newBarStates[j] = '';\n        newBarStates[j + 1] = '';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n      if (!isStopRequested.current) {\n        newBarStates[newArray.length - 1 - i] = 'sorted';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n    }\n    if (!isStopRequested.current) {\n      newBarStates[0] = 'sorted';\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n\n  // Insertion Sort\n  const insertionSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    const newBarStates = {};\n    for (let i = 1; i < newArray.length && !isStopRequested.current; i++) {\n      let key = newArray[i];\n      let j = i - 1;\n      newBarStates[i] = 'current';\n      setBarStates({\n        ...newBarStates\n      });\n      await sleep(150);\n      if (isStopRequested.current) break;\n      while (j >= 0 && newArray[j] > key && !isStopRequested.current) {\n        newBarStates[j] = 'comparing';\n        setBarStates({\n          ...newBarStates\n        });\n        newArray[j + 1] = newArray[j];\n        setArray([...newArray]);\n        await sleep(100);\n        if (isStopRequested.current) break;\n        newBarStates[j] = '';\n        setBarStates({\n          ...newBarStates\n        });\n        j--;\n      }\n      if (!isStopRequested.current) {\n        newArray[j + 1] = key;\n        setArray([...newArray]);\n        newBarStates[i] = '';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n    }\n    if (!isStopRequested.current) {\n      for (let k = 0; k < newArray.length; k++) {\n        newBarStates[k] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n\n  // Selection Sort\n  const selectionSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    const newBarStates = {};\n    for (let i = 0; i < newArray.length && !isStopRequested.current; i++) {\n      let minIdx = i;\n      newBarStates[minIdx] = 'current';\n      setBarStates({\n        ...newBarStates\n      });\n      for (let j = i + 1; j < newArray.length && !isStopRequested.current; j++) {\n        newBarStates[j] = 'comparing';\n        setBarStates({\n          ...newBarStates\n        });\n        await sleep(100);\n        if (isStopRequested.current) break;\n        if (newArray[j] < newArray[minIdx]) {\n          newBarStates[minIdx] = '';\n          minIdx = j;\n          newBarStates[minIdx] = 'current';\n          setBarStates({\n            ...newBarStates\n          });\n        } else {\n          newBarStates[j] = '';\n          setBarStates({\n            ...newBarStates\n          });\n        }\n      }\n      if (!isStopRequested.current && minIdx !== i) {\n        [newArray[i], newArray[minIdx]] = [newArray[minIdx], newArray[i]];\n        setArray([...newArray]);\n      }\n      if (!isStopRequested.current) {\n        newBarStates[i] = 'sorted';\n        newBarStates[minIdx] = '';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n    }\n    setIsSorting(false);\n  };\n\n  // Quick Sort\n  const quickSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    await quickSortHelper(newArray, 0, newArray.length - 1);\n    if (!isStopRequested.current) {\n      const newBarStates = {};\n      for (let i = 0; i < newArray.length; i++) {\n        newBarStates[i] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n  const quickSortHelper = async (arr, low, high) => {\n    if (isStopRequested.current) return;\n    if (low < high && !isStopRequested.current) {\n      let pi = await partition(arr, low, high);\n      await quickSortHelper(arr, low, pi - 1);\n      await quickSortHelper(arr, pi + 1, high);\n    }\n  };\n  const partition = async (arr, low, high) => {\n    if (isStopRequested.current) return low;\n    let pivot = arr[high];\n    let i = low - 1;\n    for (let j = low; j < high && !isStopRequested.current; j++) {\n      setBarStates(prev => ({\n        ...prev,\n        [j]: 'comparing',\n        [high]: 'current'\n      }));\n      await sleep(150);\n      if (isStopRequested.current) break;\n      if (arr[j] < pivot) {\n        i++;\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n        setArray([...arr]);\n      }\n      setBarStates(prev => ({\n        ...prev,\n        [j]: ''\n      }));\n    }\n    if (!isStopRequested.current) {\n      [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n      setArray([...arr]);\n      setBarStates(prev => ({\n        ...prev,\n        [high]: ''\n      }));\n    }\n    return i + 1;\n  };\n\n  // Merge Sort\n  const mergeSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    await mergeSortHelper(newArray, 0, newArray.length - 1);\n    if (!isStopRequested.current) {\n      const newBarStates = {};\n      for (let i = 0; i < newArray.length; i++) {\n        newBarStates[i] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n  const mergeSortHelper = async (arr, start, end) => {\n    if (isStopRequested.current) return;\n    if (start < end && !isStopRequested.current) {\n      let mid = Math.floor((start + end) / 2);\n      await mergeSortHelper(arr, start, mid);\n      await mergeSortHelper(arr, mid + 1, end);\n      await merge(arr, start, mid, end);\n    }\n  };\n  const merge = async (arr, start, mid, end) => {\n    if (isStopRequested.current) return;\n    let left = arr.slice(start, mid + 1);\n    let right = arr.slice(mid + 1, end + 1);\n    let i = 0,\n      j = 0,\n      k = start;\n    while (i < left.length && j < right.length && !isStopRequested.current) {\n      setBarStates(prev => ({\n        ...prev,\n        [k]: 'comparing'\n      }));\n      await sleep(150);\n      if (isStopRequested.current) break;\n      if (left[i] <= right[j]) {\n        arr[k] = left[i++];\n      } else {\n        arr[k] = right[j++];\n      }\n      setArray([...arr]);\n      setBarStates(prev => ({\n        ...prev,\n        [k]: ''\n      }));\n      k++;\n    }\n    while (i < left.length && !isStopRequested.current) {\n      arr[k] = left[i++];\n      setArray([...arr]);\n      k++;\n      await sleep(100);\n    }\n    while (j < right.length && !isStopRequested.current) {\n      arr[k] = right[j++];\n      setArray([...arr]);\n      k++;\n      await sleep(100);\n    }\n  };\n\n  // Heap Sort\n  const heapSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    let n = newArray.length;\n\n    // Build heap\n    for (let i = Math.floor(n / 2) - 1; i >= 0 && !isStopRequested.current; i--) {\n      await heapify(newArray, n, i);\n    }\n\n    // Extract elements from heap\n    for (let i = n - 1; i > 0 && !isStopRequested.current; i--) {\n      [newArray[0], newArray[i]] = [newArray[i], newArray[0]];\n      setArray([...newArray]);\n      if (!isStopRequested.current) {\n        setBarStates(prev => ({\n          ...prev,\n          [i]: 'sorted'\n        }));\n        await heapify(newArray, i, 0);\n      }\n    }\n    if (!isStopRequested.current) {\n      setBarStates(prev => ({\n        ...prev,\n        [0]: 'sorted'\n      }));\n    }\n    setIsSorting(false);\n  };\n  const heapify = async (arr, n, i) => {\n    if (isStopRequested.current) return;\n    let largest = i;\n    let l = 2 * i + 1;\n    let r = 2 * i + 2;\n    if (l < n && arr[l] > arr[largest]) largest = l;\n    if (r < n && arr[r] > arr[largest]) largest = r;\n    if (largest !== i && !isStopRequested.current) {\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      setArray([...arr]);\n      setBarStates(prev => ({\n        ...prev,\n        [i]: 'comparing',\n        [largest]: 'comparing'\n      }));\n      await sleep(150);\n      if (!isStopRequested.current) {\n        setBarStates(prev => ({\n          ...prev,\n          [i]: '',\n          [largest]: ''\n        }));\n        await heapify(arr, n, largest);\n      }\n    }\n  };\n\n  // Shell Sort\n  const shellSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    let n = newArray.length;\n    let gap = Math.floor(n / 2);\n    while (gap > 0 && !isStopRequested.current) {\n      for (let i = gap; i < n && !isStopRequested.current; i++) {\n        let temp = newArray[i];\n        let j = i;\n        setBarStates(prev => ({\n          ...prev,\n          [i]: 'current'\n        }));\n        await sleep(150);\n        while (j >= gap && newArray[j - gap] > temp && !isStopRequested.current) {\n          setBarStates(prev => ({\n            ...prev,\n            [j - gap]: 'comparing'\n          }));\n          newArray[j] = newArray[j - gap];\n          setArray([...newArray]);\n          await sleep(100);\n          setBarStates(prev => ({\n            ...prev,\n            [j - gap]: ''\n          }));\n          j -= gap;\n        }\n        if (!isStopRequested.current) {\n          newArray[j] = temp;\n          setArray([...newArray]);\n          setBarStates(prev => ({\n            ...prev,\n            [i]: ''\n          }));\n        }\n      }\n      gap = Math.floor(gap / 2);\n    }\n    if (!isStopRequested.current) {\n      const newBarStates = {};\n      for (let k = 0; k < newArray.length; k++) {\n        newBarStates[k] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n\n  // Start sorting based on algorithm\n  const startSorting = async algorithm => {\n    if (isSorting) {\n      alert(\"Sorting is already in progress!\");\n      return;\n    }\n    if (!array || array.length === 0) {\n      alert(\"Please generate an array first!\");\n      return;\n    }\n    switch (algorithm) {\n      case \"bubble\":\n        await bubbleSort();\n        break;\n      case \"insertion\":\n        await insertionSort();\n        break;\n      case \"selection\":\n        await selectionSort();\n        break;\n      case \"quick\":\n        await quickSort();\n        break;\n      case \"merge\":\n        await mergeSort();\n        break;\n      case \"heap\":\n        await heapSort();\n        break;\n      case \"shell\":\n        await shellSort();\n        break;\n      default:\n        break;\n    }\n  };\n  const renderSortingSection = () => /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"sorting\",\n    className: \"section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: \"Sorting Algorithms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"section-subtitle\",\n        children: \"Visualize different sorting algorithms in action\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"control-label\",\n            children: \"Array Size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"5\",\n            max: \"50\",\n            value: numBars,\n            onChange: e => updateBarCount(e.target.value),\n            disabled: isSorting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"control-label\",\n            children: numBars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"algorithm-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('quick'),\n          disabled: isSorting,\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('bubble'),\n          disabled: isSorting,\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('insertion'),\n          disabled: isSorting,\n          children: \"Insertion Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('selection'),\n          disabled: isSorting,\n          children: \"Selection Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('heap'),\n          disabled: isSorting,\n          children: \"Heap Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('merge'),\n          disabled: isSorting,\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('shell'),\n          disabled: isSorting,\n          children: \"Shell Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: generateArray,\n          disabled: isSorting,\n          children: \"Generate Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: stopSorting,\n          disabled: !isSorting,\n          children: \"Stop Sorting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetVisualization,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar-container\",\n      children: array.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `bar ${barStates[index] || ''}`,\n        style: {\n          height: `${value}px`\n        },\n        children: value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 519,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: `navbar ${navbarHidden ? 'navbar-hidden' : 'navbar-visible'} ${navbarScrolled ? 'navbar-scrolled' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"nav-brand\",\n          children: \"ALgo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"nav-menu\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#sorting\",\n              className: `nav-link ${currentSection === 'sorting' ? 'active' : ''}`,\n              onClick: e => {\n                e.preventDefault();\n                setCurrentSection('sorting');\n              },\n              children: \"Sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#searching\",\n              className: `nav-link ${currentSection === 'searching' ? 'active' : ''}`,\n              onClick: e => {\n                e.preventDefault();\n                setCurrentSection('searching');\n              },\n              children: \"Searching\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#bfs\",\n              className: `nav-link ${currentSection === 'bfs' ? 'active' : ''}`,\n              onClick: e => {\n                e.preventDefault();\n                setCurrentSection('bfs');\n              },\n              children: \"BFS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#recursive\",\n              className: `nav-link ${currentSection === 'recursive' ? 'active' : ''}`,\n              onClick: e => {\n                e.preventDefault();\n                setCurrentSection('recursive');\n              },\n              children: \"Recursive\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#tree\",\n              className: `nav-link ${currentSection === 'tree' ? 'active' : ''}`,\n              onClick: e => {\n                e.preventDefault();\n                setCurrentSection('tree');\n              },\n              children: \"Tree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [currentSection === 'sorting' && renderSortingSection(), currentSection === 'searching' && /*#__PURE__*/_jsxDEV(SearchVisualizer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 44\n      }, this), currentSection === 'bfs' && /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"bfs\",\n        className: \"section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Breadth-First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"section-subtitle\",\n            children: \"Coming soon...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 11\n      }, this), currentSection === 'recursive' && /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"recursive\",\n        className: \"section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Recursive Algorithms\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"section-subtitle\",\n            children: \"Coming soon...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 11\n      }, this), currentSection === 'tree' && /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"tree\",\n        className: \"section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section-title\",\n            children: \"Tree Algorithms\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"section-subtitle\",\n            children: \"Coming soon...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 621,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UeSh+c1nFqyMNkuwFtQqhm1sLYc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","SearchVisualizer","Navbar","jsxDEV","_jsxDEV","sleep","ms","Promise","resolve","setTimeout","App","_s","currentSection","setCurrentSection","array","setArray","numBars","setNumBars","isSorting","setIsSorting","barStates","setBarStates","navbarHidden","setNavbarHidden","navbarScrolled","setNavbarScrolled","isStopRequested","lastScrollTop","ticking","updateNavbar","scrollTop","window","pageYOffset","document","documentElement","requestTick","requestAnimationFrame","addEventListener","removeEventListener","generateArray","newArray","i","push","Math","floor","random","updateBarCount","value","parseInt","stopSorting","current","resetVisualization","bubbleSort","newBarStates","length","j","insertionSort","key","k","selectionSort","minIdx","quickSort","quickSortHelper","arr","low","high","pi","partition","pivot","prev","mergeSort","mergeSortHelper","start","end","mid","merge","left","slice","right","heapSort","n","heapify","largest","l","r","shellSort","gap","temp","startSorting","algorithm","alert","renderSortingSection","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","onChange","e","target","disabled","onClick","map","index","style","height","href","preventDefault","_c","$RefreshReg$"],"sources":["A:/Algorithm Visualiser/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport SearchVisualizer from './SearchVisualizer';\r\nimport Navbar from './Navbar';\r\n\r\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nfunction App() {\r\n  const [currentSection, setCurrentSection] = useState('sorting');\r\n  const [array, setArray] = useState([]);\r\n  const [numBars, setNumBars] = useState(15);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [barStates, setBarStates] = useState({});\r\n  \r\n  // Navbar scroll states\r\n  const [navbarHidden, setNavbarHidden] = useState(false);\r\n  const [navbarScrolled, setNavbarScrolled] = useState(false);\r\n  \r\n  const isStopRequested = useRef(false);\r\n\r\n  // Navbar scroll animation effect\r\n  useEffect(() => {\r\n    let lastScrollTop = 0;\r\n    let ticking = false;\r\n\r\n    const updateNavbar = () => {\r\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n      \r\n      if (scrollTop > lastScrollTop && scrollTop > 100) {\r\n        // Scrolling down & past threshold\r\n        setNavbarHidden(true);\r\n      } else if (scrollTop < lastScrollTop || scrollTop <= 100) {\r\n        // Scrolling up or at top\r\n        setNavbarHidden(false);\r\n      }\r\n      \r\n      // Add scrolled state for enhanced styling\r\n      setNavbarScrolled(scrollTop > 50);\r\n      \r\n      lastScrollTop = scrollTop;\r\n      ticking = false;\r\n    };\r\n\r\n    const requestTick = () => {\r\n      if (!ticking) {\r\n        requestAnimationFrame(updateNavbar);\r\n        ticking = true;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', requestTick);\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      window.removeEventListener('scroll', requestTick);\r\n    };\r\n  }, []);\r\n\r\n  // Generate random array\r\n  const generateArray = useCallback(() => {\r\n    const newArray = [];\r\n    for (let i = 0; i < numBars; i++) {\r\n      newArray.push(Math.floor(Math.random() * 200) + 20);\r\n    }\r\n    setArray(newArray);\r\n    setBarStates({});\r\n  }, [numBars]);\r\n\r\n  // Initialize array on component mount\r\n  useEffect(() => {\r\n    generateArray();\r\n  }, [generateArray]);\r\n\r\n  // Update bar count\r\n  const updateBarCount = (value) => {\r\n    setNumBars(parseInt(value));\r\n  };\r\n\r\n  // Stop sorting\r\n  const stopSorting = () => {\r\n    isStopRequested.current = true;\r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Reset visualization\r\n  const resetVisualization = () => {\r\n    isStopRequested.current = true;\r\n    setIsSorting(false);\r\n    setBarStates({});\r\n    setTimeout(() => {\r\n      generateArray();\r\n      isStopRequested.current = false;\r\n    }, 100);\r\n  };\r\n\r\n  // Bubble Sort\r\n  const bubbleSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    const newBarStates = {};\r\n\r\n    for (let i = 0; i < newArray.length - 1 && !isStopRequested.current; i++) {\r\n      for (let j = 0; j < newArray.length - i - 1 && !isStopRequested.current; j++) {\r\n        newBarStates[j] = 'comparing';\r\n        newBarStates[j + 1] = 'comparing';\r\n        setBarStates({ ...newBarStates });\r\n        \r\n        await sleep(100);\r\n        \r\n        if (isStopRequested.current) break;\r\n\r\n        if (newArray[j] > newArray[j + 1]) {\r\n          [newArray[j], newArray[j + 1]] = [newArray[j + 1], newArray[j]];\r\n          setArray([...newArray]);\r\n        }\r\n\r\n        newBarStates[j] = '';\r\n        newBarStates[j + 1] = '';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n      if (!isStopRequested.current) {\r\n        newBarStates[newArray.length - 1 - i] = 'sorted';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      newBarStates[0] = 'sorted';\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Insertion Sort\r\n  const insertionSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    const newBarStates = {};\r\n\r\n    for (let i = 1; i < newArray.length && !isStopRequested.current; i++) {\r\n      let key = newArray[i];\r\n      let j = i - 1;\r\n\r\n      newBarStates[i] = 'current';\r\n      setBarStates({ ...newBarStates });\r\n      await sleep(150);\r\n      \r\n      if (isStopRequested.current) break;\r\n\r\n      while (j >= 0 && newArray[j] > key && !isStopRequested.current) {\r\n        newBarStates[j] = 'comparing';\r\n        setBarStates({ ...newBarStates });\r\n        \r\n        newArray[j + 1] = newArray[j];\r\n        setArray([...newArray]);\r\n        await sleep(100);\r\n        \r\n        if (isStopRequested.current) break;\r\n        \r\n        newBarStates[j] = '';\r\n        setBarStates({ ...newBarStates });\r\n        j--;\r\n      }\r\n\r\n      if (!isStopRequested.current) {\r\n        newArray[j + 1] = key;\r\n        setArray([...newArray]);\r\n        newBarStates[i] = '';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      for (let k = 0; k < newArray.length; k++) {\r\n        newBarStates[k] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Selection Sort\r\n  const selectionSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    const newBarStates = {};\r\n\r\n    for (let i = 0; i < newArray.length && !isStopRequested.current; i++) {\r\n      let minIdx = i;\r\n      newBarStates[minIdx] = 'current';\r\n      setBarStates({ ...newBarStates });\r\n\r\n      for (let j = i + 1; j < newArray.length && !isStopRequested.current; j++) {\r\n        newBarStates[j] = 'comparing';\r\n        setBarStates({ ...newBarStates });\r\n        await sleep(100);\r\n        \r\n        if (isStopRequested.current) break;\r\n\r\n        if (newArray[j] < newArray[minIdx]) {\r\n          newBarStates[minIdx] = '';\r\n          minIdx = j;\r\n          newBarStates[minIdx] = 'current';\r\n          setBarStates({ ...newBarStates });\r\n        } else {\r\n          newBarStates[j] = '';\r\n          setBarStates({ ...newBarStates });\r\n        }\r\n      }\r\n\r\n      if (!isStopRequested.current && minIdx !== i) {\r\n        [newArray[i], newArray[minIdx]] = [newArray[minIdx], newArray[i]];\r\n        setArray([...newArray]);\r\n      }\r\n\r\n      if (!isStopRequested.current) {\r\n        newBarStates[i] = 'sorted';\r\n        newBarStates[minIdx] = '';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Quick Sort\r\n  const quickSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    await quickSortHelper(newArray, 0, newArray.length - 1);\r\n    \r\n    if (!isStopRequested.current) {\r\n      const newBarStates = {};\r\n      for (let i = 0; i < newArray.length; i++) {\r\n        newBarStates[i] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  const quickSortHelper = async (arr, low, high) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    if (low < high && !isStopRequested.current) {\r\n      let pi = await partition(arr, low, high);\r\n      await quickSortHelper(arr, low, pi - 1);\r\n      await quickSortHelper(arr, pi + 1, high);\r\n    }\r\n  };\r\n\r\n  const partition = async (arr, low, high) => {\r\n    if (isStopRequested.current) return low;\r\n    \r\n    let pivot = arr[high];\r\n    let i = low - 1;\r\n\r\n    for (let j = low; j < high && !isStopRequested.current; j++) {\r\n      setBarStates(prev => ({ ...prev, [j]: 'comparing', [high]: 'current' }));\r\n      await sleep(150);\r\n      \r\n      if (isStopRequested.current) break;\r\n\r\n      if (arr[j] < pivot) {\r\n        i++;\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n        setArray([...arr]);\r\n      }\r\n\r\n      setBarStates(prev => ({ ...prev, [j]: '' }));\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\r\n      setArray([...arr]);\r\n      setBarStates(prev => ({ ...prev, [high]: '' }));\r\n    }\r\n\r\n    return i + 1;\r\n  };\r\n\r\n  // Merge Sort\r\n  const mergeSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    await mergeSortHelper(newArray, 0, newArray.length - 1);\r\n    \r\n    if (!isStopRequested.current) {\r\n      const newBarStates = {};\r\n      for (let i = 0; i < newArray.length; i++) {\r\n        newBarStates[i] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  const mergeSortHelper = async (arr, start, end) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    if (start < end && !isStopRequested.current) {\r\n      let mid = Math.floor((start + end) / 2);\r\n      await mergeSortHelper(arr, start, mid);\r\n      await mergeSortHelper(arr, mid + 1, end);\r\n      await merge(arr, start, mid, end);\r\n    }\r\n  };\r\n\r\n  const merge = async (arr, start, mid, end) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    let left = arr.slice(start, mid + 1);\r\n    let right = arr.slice(mid + 1, end + 1);\r\n\r\n    let i = 0, j = 0, k = start;\r\n\r\n    while (i < left.length && j < right.length && !isStopRequested.current) {\r\n      setBarStates(prev => ({ ...prev, [k]: 'comparing' }));\r\n      await sleep(150);\r\n      \r\n      if (isStopRequested.current) break;\r\n\r\n      if (left[i] <= right[j]) {\r\n        arr[k] = left[i++];\r\n      } else {\r\n        arr[k] = right[j++];\r\n      }\r\n\r\n      setArray([...arr]);\r\n      setBarStates(prev => ({ ...prev, [k]: '' }));\r\n      k++;\r\n    }\r\n\r\n    while (i < left.length && !isStopRequested.current) {\r\n      arr[k] = left[i++];\r\n      setArray([...arr]);\r\n      k++;\r\n      await sleep(100);\r\n    }\r\n\r\n    while (j < right.length && !isStopRequested.current) {\r\n      arr[k] = right[j++];\r\n      setArray([...arr]);\r\n      k++;\r\n      await sleep(100);\r\n    }\r\n  };\r\n\r\n  // Heap Sort\r\n  const heapSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    let n = newArray.length;\r\n\r\n    // Build heap\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0 && !isStopRequested.current; i--) {\r\n      await heapify(newArray, n, i);\r\n    }\r\n\r\n    // Extract elements from heap\r\n    for (let i = n - 1; i > 0 && !isStopRequested.current; i--) {\r\n      [newArray[0], newArray[i]] = [newArray[i], newArray[0]];\r\n      setArray([...newArray]);\r\n\r\n      if (!isStopRequested.current) {\r\n        setBarStates(prev => ({ ...prev, [i]: 'sorted' }));\r\n        await heapify(newArray, i, 0);\r\n      }\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      setBarStates(prev => ({ ...prev, [0]: 'sorted' }));\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  const heapify = async (arr, n, i) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    let largest = i;\r\n    let l = 2 * i + 1;\r\n    let r = 2 * i + 2;\r\n\r\n    if (l < n && arr[l] > arr[largest]) largest = l;\r\n    if (r < n && arr[r] > arr[largest]) largest = r;\r\n\r\n    if (largest !== i && !isStopRequested.current) {\r\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\r\n      setArray([...arr]);\r\n      \r\n      setBarStates(prev => ({ \r\n        ...prev, \r\n        [i]: 'comparing', \r\n        [largest]: 'comparing' \r\n      }));\r\n\r\n      await sleep(150);\r\n      \r\n      if (!isStopRequested.current) {\r\n        setBarStates(prev => ({ \r\n          ...prev, \r\n          [i]: '', \r\n          [largest]: '' \r\n        }));\r\n        await heapify(arr, n, largest);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Shell Sort\r\n  const shellSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    let n = newArray.length;\r\n    let gap = Math.floor(n / 2);\r\n\r\n    while (gap > 0 && !isStopRequested.current) {\r\n      for (let i = gap; i < n && !isStopRequested.current; i++) {\r\n        let temp = newArray[i];\r\n        let j = i;\r\n\r\n        setBarStates(prev => ({ ...prev, [i]: 'current' }));\r\n        await sleep(150);\r\n\r\n        while (j >= gap && newArray[j - gap] > temp && !isStopRequested.current) {\r\n          setBarStates(prev => ({ ...prev, [j - gap]: 'comparing' }));\r\n          newArray[j] = newArray[j - gap];\r\n          setArray([...newArray]);\r\n          await sleep(100);\r\n          setBarStates(prev => ({ ...prev, [j - gap]: '' }));\r\n          j -= gap;\r\n        }\r\n\r\n        if (!isStopRequested.current) {\r\n          newArray[j] = temp;\r\n          setArray([...newArray]);\r\n          setBarStates(prev => ({ ...prev, [i]: '' }));\r\n        }\r\n      }\r\n      gap = Math.floor(gap / 2);\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      const newBarStates = {};\r\n      for (let k = 0; k < newArray.length; k++) {\r\n        newBarStates[k] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n\r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Start sorting based on algorithm\r\n  const startSorting = async (algorithm) => {\r\n    if (isSorting) {\r\n      alert(\"Sorting is already in progress!\");\r\n      return;\r\n    }\r\n    \r\n    if (!array || array.length === 0) {\r\n      alert(\"Please generate an array first!\");\r\n      return;\r\n    }\r\n    \r\n    switch (algorithm) {\r\n      case \"bubble\":\r\n        await bubbleSort();\r\n        break;\r\n      case \"insertion\":\r\n        await insertionSort();\r\n        break;\r\n      case \"selection\":\r\n        await selectionSort();\r\n        break;\r\n      case \"quick\":\r\n        await quickSort();\r\n        break;\r\n      case \"merge\":\r\n        await mergeSort();\r\n        break;\r\n      case \"heap\":\r\n        await heapSort();\r\n        break;\r\n      case \"shell\":\r\n        await shellSort();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const renderSortingSection = () => (\r\n    <section id=\"sorting\" className=\"section\">\r\n      <div className=\"section-header\">\r\n        <h2 className=\"section-title\">Sorting Algorithms</h2>\r\n        <p className=\"section-subtitle\">Visualize different sorting algorithms in action</p>\r\n      </div>\r\n\r\n      <div className=\"controls-section\">\r\n        <div className=\"controls-row\">\r\n          <div className=\"control-group\">\r\n            <label className=\"control-label\">Array Size:</label>\r\n            <input \r\n              type=\"range\" \r\n              min=\"5\" \r\n              max=\"50\" \r\n              value={numBars} \r\n              onChange={(e) => updateBarCount(e.target.value)}\r\n              disabled={isSorting}\r\n            />\r\n            <span className=\"control-label\">{numBars}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"algorithm-buttons\">\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('quick')} \r\n            disabled={isSorting}\r\n          >\r\n            Quick Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('bubble')} \r\n            disabled={isSorting}\r\n          >\r\n            Bubble Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('insertion')} \r\n            disabled={isSorting}\r\n          >\r\n            Insertion Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('selection')} \r\n            disabled={isSorting}\r\n          >\r\n            Selection Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('heap')} \r\n            disabled={isSorting}\r\n          >\r\n            Heap Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('merge')} \r\n            disabled={isSorting}\r\n          >\r\n            Merge Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('shell')} \r\n            disabled={isSorting}\r\n          >\r\n            Shell Sort\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"controls-row\">\r\n          <button className=\"btn btn-primary\" onClick={generateArray} disabled={isSorting}>\r\n            Generate Array\r\n          </button>\r\n          <button className=\"btn btn-secondary\" onClick={stopSorting} disabled={!isSorting}>\r\n            Stop Sorting\r\n          </button>\r\n          <button className=\"btn btn-success\" onClick={resetVisualization}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"bar-container\">\r\n        {array.map((value, index) => (\r\n          <div\r\n            key={index}\r\n            className={`bar ${barStates[index] || ''}`}\r\n            style={{ height: `${value}px` }}\r\n          >\r\n            {value}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {/* Navbar with dynamic classes for scroll animation */}\r\n      <nav className={`navbar ${navbarHidden ? 'navbar-hidden' : 'navbar-visible'} ${navbarScrolled ? 'navbar-scrolled' : ''}`}>\r\n        <div className=\"nav-container\">\r\n          <a href=\"#\" className=\"nav-brand\">ALgo</a>\r\n          <ul className=\"nav-menu\">\r\n            <li className=\"nav-item\">\r\n              <a \r\n                href=\"#sorting\" \r\n                className={`nav-link ${currentSection === 'sorting' ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setCurrentSection('sorting');\r\n                }}\r\n              >\r\n                Sorting\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a \r\n                href=\"#searching\" \r\n                className={`nav-link ${currentSection === 'searching' ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setCurrentSection('searching');\r\n                }}\r\n              >\r\n                Searching\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a \r\n                href=\"#bfs\" \r\n                className={`nav-link ${currentSection === 'bfs' ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setCurrentSection('bfs');\r\n                }}\r\n              >\r\n                BFS\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a \r\n                href=\"#recursive\" \r\n                className={`nav-link ${currentSection === 'recursive' ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setCurrentSection('recursive');\r\n                }}\r\n              >\r\n                Recursive\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a \r\n                href=\"#tree\" \r\n                className={`nav-link ${currentSection === 'tree' ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setCurrentSection('tree');\r\n                }}\r\n              >\r\n                Tree\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"main-content\">\r\n        {currentSection === 'sorting' && renderSortingSection()}\r\n        {currentSection === 'searching' && <SearchVisualizer />}\r\n        {currentSection === 'bfs' && (\r\n          <section id=\"bfs\" className=\"section\">\r\n            <div className=\"section-header\">\r\n              <h2 className=\"section-title\">Breadth-First Search</h2>\r\n              <p className=\"section-subtitle\">Coming soon...</p>\r\n            </div>\r\n          </section>\r\n        )}\r\n        {currentSection === 'recursive' && (\r\n          <section id=\"recursive\" className=\"section\">\r\n            <div className=\"section-header\">\r\n              <h2 className=\"section-title\">Recursive Algorithms</h2>\r\n              <p className=\"section-subtitle\">Coming soon...</p>\r\n            </div>\r\n          </section>\r\n        )}\r\n        {currentSection === 'tree' && (\r\n          <section id=\"tree\" className=\"section\">\r\n            <div className=\"section-header\">\r\n              <h2 className=\"section-title\">Tree Algorithms</h2>\r\n              <p className=\"section-subtitle\">Coming soon...</p>\r\n            </div>\r\n          </section>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}