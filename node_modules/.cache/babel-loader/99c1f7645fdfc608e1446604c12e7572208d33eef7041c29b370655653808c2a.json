{"ast":null,"code":"var _jsxFileName = \"A:\\\\Algorithm Visualiser\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport SearchVisualizer from './SearchVisualizer';\nimport Navbar from './Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nfunction App() {\n  _s();\n  const [currentSection, setCurrentSection] = useState('sorting');\n  const [array, setArray] = useState([]);\n  const [numBars, setNumBars] = useState(15);\n  const [isSorting, setIsSorting] = useState(false);\n  const [barStates, setBarStates] = useState({});\n\n  // BFS states\n  const [bfsGrid, setBfsGrid] = useState([]);\n  const [bfsStart, setBfsStart] = useState({\n    row: 0,\n    col: 0\n  });\n  const [bfsEnd, setBfsEnd] = useState({\n    row: 4,\n    col: 4\n  });\n  const [bfsPath, setBfsPath] = useState([]);\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\n  const [bfsVisited, setBfsVisited] = useState([]);\n\n  // Recursive states\n  const [recursiveArray, setRecursiveArray] = useState([]);\n  const [recursiveTarget, setRecursiveTarget] = useState(50);\n  const [isRecursiveRunning, setIsRecursiveRunning] = useState(false);\n  const [recursiveSteps, setRecursiveSteps] = useState([]);\n  const [recursiveResult, setRecursiveResult] = useState(null);\n\n  // Tree states\n  const [treeData, setTreeData] = useState([]);\n  const [treeTraversal, setTreeTraversal] = useState([]);\n  const [isTreeRunning, setIsTreeRunning] = useState(false);\n  const [treeType, setTreeType] = useState('binary');\n\n  // Navbar scroll states\n  const [navbarHidden, setNavbarHidden] = useState(false);\n  const [navbarScrolled, setNavbarScrolled] = useState(false);\n  const isStopRequested = useRef(false);\n\n  // Navbar scroll animation effect\n  useEffect(() => {\n    let lastScrollTop = 0;\n    let ticking = false;\n    const updateNavbar = () => {\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n      if (scrollTop > lastScrollTop && scrollTop > 100) {\n        // Scrolling down & past threshold\n        setNavbarHidden(true);\n      } else if (scrollTop < lastScrollTop || scrollTop <= 100) {\n        // Scrolling up or at top\n        setNavbarHidden(false);\n      }\n\n      // Add scrolled state for enhanced styling\n      setNavbarScrolled(scrollTop > 50);\n      lastScrollTop = scrollTop;\n      ticking = false;\n    };\n    const requestTick = () => {\n      if (!ticking) {\n        requestAnimationFrame(updateNavbar);\n        ticking = true;\n      }\n    };\n    window.addEventListener('scroll', requestTick);\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('scroll', requestTick);\n    };\n  }, []);\n\n  // Generate random array\n  const generateArray = useCallback(() => {\n    const newArray = [];\n    for (let i = 0; i < numBars; i++) {\n      newArray.push(Math.floor(Math.random() * 200) + 20);\n    }\n    setArray(newArray);\n    setBarStates({});\n  }, [numBars]);\n\n  // Initialize array on component mount\n  useEffect(() => {\n    generateArray();\n  }, [generateArray]);\n\n  // Initialize BFS grid\n  useEffect(() => {\n    initializeBfsGrid();\n  }, []);\n\n  // Initialize recursive array\n  useEffect(() => {\n    generateRecursiveArray();\n  }, []);\n\n  // Initialize tree data\n  useEffect(() => {\n    generateTreeData();\n  }, [treeType]);\n\n  // Update bar count\n  const updateBarCount = value => {\n    setNumBars(parseInt(value));\n  };\n\n  // Stop sorting\n  const stopSorting = () => {\n    isStopRequested.current = true;\n    setIsSorting(false);\n  };\n\n  // Reset visualization\n  const resetVisualization = () => {\n    isStopRequested.current = true;\n    setIsSorting(false);\n    setBarStates({});\n    setTimeout(() => {\n      generateArray();\n      isStopRequested.current = false;\n    }, 100);\n  };\n\n  // Bubble Sort\n  const bubbleSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    const newBarStates = {};\n    for (let i = 0; i < newArray.length - 1 && !isStopRequested.current; i++) {\n      for (let j = 0; j < newArray.length - i - 1 && !isStopRequested.current; j++) {\n        newBarStates[j] = 'comparing';\n        newBarStates[j + 1] = 'comparing';\n        setBarStates({\n          ...newBarStates\n        });\n        await sleep(100);\n        if (isStopRequested.current) break;\n        if (newArray[j] > newArray[j + 1]) {\n          [newArray[j], newArray[j + 1]] = [newArray[j + 1], newArray[j]];\n          setArray([...newArray]);\n        }\n        newBarStates[j] = '';\n        newBarStates[j + 1] = '';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n      if (!isStopRequested.current) {\n        newBarStates[newArray.length - 1 - i] = 'sorted';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n    }\n    if (!isStopRequested.current) {\n      newBarStates[0] = 'sorted';\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n\n  // Insertion Sort\n  const insertionSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    const newBarStates = {};\n    for (let i = 1; i < newArray.length && !isStopRequested.current; i++) {\n      let key = newArray[i];\n      let j = i - 1;\n      newBarStates[i] = 'current';\n      setBarStates({\n        ...newBarStates\n      });\n      await sleep(150);\n      if (isStopRequested.current) break;\n      while (j >= 0 && newArray[j] > key && !isStopRequested.current) {\n        newBarStates[j] = 'comparing';\n        setBarStates({\n          ...newBarStates\n        });\n        newArray[j + 1] = newArray[j];\n        setArray([...newArray]);\n        await sleep(100);\n        if (isStopRequested.current) break;\n        newBarStates[j] = '';\n        setBarStates({\n          ...newBarStates\n        });\n        j--;\n      }\n      if (!isStopRequested.current) {\n        newArray[j + 1] = key;\n        setArray([...newArray]);\n        newBarStates[i] = '';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n    }\n    if (!isStopRequested.current) {\n      for (let k = 0; k < newArray.length; k++) {\n        newBarStates[k] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n\n  // Selection Sort\n  const selectionSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    const newBarStates = {};\n    for (let i = 0; i < newArray.length && !isStopRequested.current; i++) {\n      let minIdx = i;\n      newBarStates[minIdx] = 'current';\n      setBarStates({\n        ...newBarStates\n      });\n      for (let j = i + 1; j < newArray.length && !isStopRequested.current; j++) {\n        newBarStates[j] = 'comparing';\n        setBarStates({\n          ...newBarStates\n        });\n        await sleep(100);\n        if (isStopRequested.current) break;\n        if (newArray[j] < newArray[minIdx]) {\n          newBarStates[minIdx] = '';\n          minIdx = j;\n          newBarStates[minIdx] = 'current';\n          setBarStates({\n            ...newBarStates\n          });\n        } else {\n          newBarStates[j] = '';\n          setBarStates({\n            ...newBarStates\n          });\n        }\n      }\n      if (!isStopRequested.current && minIdx !== i) {\n        [newArray[i], newArray[minIdx]] = [newArray[minIdx], newArray[i]];\n        setArray([...newArray]);\n      }\n      if (!isStopRequested.current) {\n        newBarStates[i] = 'sorted';\n        newBarStates[minIdx] = '';\n        setBarStates({\n          ...newBarStates\n        });\n      }\n    }\n    setIsSorting(false);\n  };\n\n  // Quick Sort\n  const quickSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    await quickSortHelper(newArray, 0, newArray.length - 1);\n    if (!isStopRequested.current) {\n      const newBarStates = {};\n      for (let i = 0; i < newArray.length; i++) {\n        newBarStates[i] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n  const quickSortHelper = async (arr, low, high) => {\n    if (isStopRequested.current) return;\n    if (low < high && !isStopRequested.current) {\n      let pi = await partition(arr, low, high);\n      await quickSortHelper(arr, low, pi - 1);\n      await quickSortHelper(arr, pi + 1, high);\n    }\n  };\n  const partition = async (arr, low, high) => {\n    if (isStopRequested.current) return low;\n    let pivot = arr[high];\n    let i = low - 1;\n    for (let j = low; j < high && !isStopRequested.current; j++) {\n      setBarStates(prev => ({\n        ...prev,\n        [j]: 'comparing',\n        [high]: 'current'\n      }));\n      await sleep(150);\n      if (isStopRequested.current) break;\n      if (arr[j] < pivot) {\n        i++;\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n        setArray([...arr]);\n      }\n      setBarStates(prev => ({\n        ...prev,\n        [j]: ''\n      }));\n    }\n    if (!isStopRequested.current) {\n      [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n      setArray([...arr]);\n      setBarStates(prev => ({\n        ...prev,\n        [high]: ''\n      }));\n    }\n    return i + 1;\n  };\n\n  // Merge Sort\n  const mergeSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    await mergeSortHelper(newArray, 0, newArray.length - 1);\n    if (!isStopRequested.current) {\n      const newBarStates = {};\n      for (let i = 0; i < newArray.length; i++) {\n        newBarStates[i] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n  const mergeSortHelper = async (arr, start, end) => {\n    if (isStopRequested.current) return;\n    if (start < end && !isStopRequested.current) {\n      let mid = Math.floor((start + end) / 2);\n      await mergeSortHelper(arr, start, mid);\n      await mergeSortHelper(arr, mid + 1, end);\n      await merge(arr, start, mid, end);\n    }\n  };\n  const merge = async (arr, start, mid, end) => {\n    if (isStopRequested.current) return;\n    let left = arr.slice(start, mid + 1);\n    let right = arr.slice(mid + 1, end + 1);\n    let i = 0,\n      j = 0,\n      k = start;\n    while (i < left.length && j < right.length && !isStopRequested.current) {\n      setBarStates(prev => ({\n        ...prev,\n        [k]: 'comparing'\n      }));\n      await sleep(150);\n      if (isStopRequested.current) break;\n      if (left[i] <= right[j]) {\n        arr[k] = left[i++];\n      } else {\n        arr[k] = right[j++];\n      }\n      setArray([...arr]);\n      setBarStates(prev => ({\n        ...prev,\n        [k]: ''\n      }));\n      k++;\n    }\n    while (i < left.length && !isStopRequested.current) {\n      arr[k] = left[i++];\n      setArray([...arr]);\n      k++;\n      await sleep(100);\n    }\n    while (j < right.length && !isStopRequested.current) {\n      arr[k] = right[j++];\n      setArray([...arr]);\n      k++;\n      await sleep(100);\n    }\n  };\n\n  // Heap Sort\n  const heapSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    let n = newArray.length;\n\n    // Build heap\n    for (let i = Math.floor(n / 2) - 1; i >= 0 && !isStopRequested.current; i--) {\n      await heapify(newArray, n, i);\n    }\n\n    // Extract elements from heap\n    for (let i = n - 1; i > 0 && !isStopRequested.current; i--) {\n      [newArray[0], newArray[i]] = [newArray[i], newArray[0]];\n      setArray([...newArray]);\n      if (!isStopRequested.current) {\n        setBarStates(prev => ({\n          ...prev,\n          [i]: 'sorted'\n        }));\n        await heapify(newArray, i, 0);\n      }\n    }\n    if (!isStopRequested.current) {\n      setBarStates(prev => ({\n        ...prev,\n        [0]: 'sorted'\n      }));\n    }\n    setIsSorting(false);\n  };\n  const heapify = async (arr, n, i) => {\n    if (isStopRequested.current) return;\n    let largest = i;\n    let l = 2 * i + 1;\n    let r = 2 * i + 2;\n    if (l < n && arr[l] > arr[largest]) largest = l;\n    if (r < n && arr[r] > arr[largest]) largest = r;\n    if (largest !== i && !isStopRequested.current) {\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      setArray([...arr]);\n      setBarStates(prev => ({\n        ...prev,\n        [i]: 'comparing',\n        [largest]: 'comparing'\n      }));\n      await sleep(150);\n      if (!isStopRequested.current) {\n        setBarStates(prev => ({\n          ...prev,\n          [i]: '',\n          [largest]: ''\n        }));\n        await heapify(arr, n, largest);\n      }\n    }\n  };\n\n  // Shell Sort\n  const shellSort = async () => {\n    if (isSorting) return;\n    setIsSorting(true);\n    isStopRequested.current = false;\n    const newArray = [...array];\n    let n = newArray.length;\n    let gap = Math.floor(n / 2);\n    while (gap > 0 && !isStopRequested.current) {\n      for (let i = gap; i < n && !isStopRequested.current; i++) {\n        let temp = newArray[i];\n        let j = i;\n        setBarStates(prev => ({\n          ...prev,\n          [i]: 'current'\n        }));\n        await sleep(150);\n        while (j >= gap && newArray[j - gap] > temp && !isStopRequested.current) {\n          setBarStates(prev => ({\n            ...prev,\n            [j - gap]: 'comparing'\n          }));\n          newArray[j] = newArray[j - gap];\n          setArray([...newArray]);\n          await sleep(100);\n          setBarStates(prev => ({\n            ...prev,\n            [j - gap]: ''\n          }));\n          j -= gap;\n        }\n        if (!isStopRequested.current) {\n          newArray[j] = temp;\n          setArray([...newArray]);\n          setBarStates(prev => ({\n            ...prev,\n            [i]: ''\n          }));\n        }\n      }\n      gap = Math.floor(gap / 2);\n    }\n    if (!isStopRequested.current) {\n      const newBarStates = {};\n      for (let k = 0; k < newArray.length; k++) {\n        newBarStates[k] = 'sorted';\n      }\n      setBarStates({\n        ...newBarStates\n      });\n    }\n    setIsSorting(false);\n  };\n\n  // BFS Functions\n  const initializeBfsGrid = () => {\n    const grid = [];\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        row.push({\n          row: i,\n          col: j,\n          isWall: Math.random() < 0.3,\n          isStart: i === 0 && j === 0,\n          isEnd: i === 4 && j === 4,\n          isVisited: false,\n          isPath: false\n        });\n      }\n      grid.push(row);\n    }\n    setBfsGrid(grid);\n  };\n  const bfs = async () => {\n    if (isBfsRunning) return;\n    setIsBfsRunning(true);\n    isStopRequested.current = false;\n    const grid = bfsGrid.map(row => row.map(cell => ({\n      ...cell\n    })));\n    const queue = [{\n      row: bfsStart.row,\n      col: bfsStart.col,\n      path: []\n    }];\n    const visited = new Set();\n    const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    while (queue.length > 0 && !isStopRequested.current) {\n      const {\n        row,\n        col,\n        path\n      } = queue.shift();\n      const key = `${row},${col}`;\n      if (visited.has(key)) continue;\n      visited.add(key);\n\n      // Mark as visited\n      grid[row][col].isVisited = true;\n      setBfsGrid([...grid]);\n      setBfsVisited([...visited]);\n      await sleep(100);\n      if (isStopRequested.current) break;\n\n      // Check if we reached the end\n      if (row === bfsEnd.row && col === bfsEnd.col) {\n        setBfsPath(path);\n        break;\n      }\n\n      // Explore neighbors\n      for (const [dr, dc] of directions) {\n        const newRow = row + dr;\n        const newCol = col + dc;\n        if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8 && !grid[newRow][newCol].isWall && !visited.has(`${newRow},${newCol}`)) {\n          queue.push({\n            row: newRow,\n            col: newCol,\n            path: [...path, {\n              row,\n              col\n            }]\n          });\n        }\n      }\n    }\n    setIsBfsRunning(false);\n  };\n\n  // Recursive Functions\n  const generateRecursiveArray = () => {\n    const arr = [];\n    for (let i = 0; i < 10; i++) {\n      arr.push(Math.floor(Math.random() * 100) + 1);\n    }\n    setRecursiveArray(arr.sort((a, b) => a - b));\n  };\n  const binarySearchRecursive = async (arr, target, left = 0, right = arr.length - 1, steps = []) => {\n    if (isStopRequested.current) return -1;\n    const mid = Math.floor((left + right) / 2);\n    const currentStep = {\n      left,\n      right,\n      mid,\n      value: arr[mid],\n      target\n    };\n    setRecursiveSteps([...steps, currentStep]);\n    await sleep(500);\n    if (isStopRequested.current) return -1;\n    if (left > right) {\n      setRecursiveResult({\n        found: false,\n        index: -1\n      });\n      return -1;\n    }\n    if (arr[mid] === target) {\n      setRecursiveResult({\n        found: true,\n        index: mid\n      });\n      return mid;\n    }\n    if (arr[mid] > target) {\n      return await binarySearchRecursive(arr, target, left, mid - 1, [...steps, currentStep]);\n    } else {\n      return await binarySearchRecursive(arr, target, mid + 1, right, [...steps, currentStep]);\n    }\n  };\n  const startRecursiveSearch = async () => {\n    if (isRecursiveRunning) return;\n    setIsRecursiveRunning(true);\n    isStopRequested.current = false;\n    setRecursiveSteps([]);\n    setRecursiveResult(null);\n    await binarySearchRecursive(recursiveArray, recursiveTarget);\n    setIsRecursiveRunning(false);\n  };\n\n  // Tree Functions\n  const generateTreeData = () => {\n    if (treeType === 'binary') {\n      const tree = [{\n        id: 1,\n        value: 50,\n        children: [2, 3]\n      }, {\n        id: 2,\n        value: 25,\n        children: [4, 5]\n      }, {\n        id: 3,\n        value: 75,\n        children: [6, 7]\n      }, {\n        id: 4,\n        value: 12,\n        children: []\n      }, {\n        id: 5,\n        value: 37,\n        children: []\n      }, {\n        id: 6,\n        value: 62,\n        children: []\n      }, {\n        id: 7,\n        value: 87,\n        children: []\n      }];\n      setTreeData(tree);\n    } else {\n      const tree = [{\n        id: 1,\n        value: 'A',\n        children: [2, 3, 4]\n      }, {\n        id: 2,\n        value: 'B',\n        children: [5, 6]\n      }, {\n        id: 3,\n        value: 'C',\n        children: [7]\n      }, {\n        id: 4,\n        value: 'D',\n        children: []\n      }, {\n        id: 5,\n        value: 'E',\n        children: []\n      }, {\n        id: 6,\n        value: 'F',\n        children: []\n      }, {\n        id: 7,\n        value: 'G',\n        children: []\n      }];\n      setTreeData(tree);\n    }\n  };\n  const traverseTree = async type => {\n    if (isTreeRunning) return;\n    setIsTreeRunning(true);\n    isStopRequested.current = false;\n    setTreeTraversal([]);\n    const visited = new Set();\n    const result = [];\n    if (type === 'inorder') {\n      await inorderTraversal(1, visited, result);\n    } else if (type === 'preorder') {\n      await preorderTraversal(1, visited, result);\n    } else if (type === 'postorder') {\n      await postorderTraversal(1, visited, result);\n    }\n    setIsTreeRunning(false);\n  };\n  const inorderTraversal = async (nodeId, visited, result) => {\n    if (isStopRequested.current) return;\n    const node = treeData.find(n => n.id === nodeId);\n    if (!node || visited.has(nodeId)) return;\n    visited.add(nodeId);\n\n    // Traverse left subtree\n    if (node.children[0]) {\n      await inorderTraversal(node.children[0], visited, result);\n    }\n\n    // Visit current node\n    result.push(node.value);\n    setTreeTraversal([...result]);\n    await sleep(500);\n    if (isStopRequested.current) return;\n\n    // Traverse right subtree\n    if (node.children[1]) {\n      await inorderTraversal(node.children[1], visited, result);\n    }\n  };\n  const preorderTraversal = async (nodeId, visited, result) => {\n    if (isStopRequested.current) return;\n    const node = treeData.find(n => n.id === nodeId);\n    if (!node || visited.has(nodeId)) return;\n    visited.add(nodeId);\n\n    // Visit current node\n    result.push(node.value);\n    setTreeTraversal([...result]);\n    await sleep(500);\n    if (isStopRequested.current) return;\n\n    // Traverse children\n    for (const childId of node.children) {\n      await preorderTraversal(childId, visited, result);\n    }\n  };\n  const postorderTraversal = async (nodeId, visited, result) => {\n    if (isStopRequested.current) return;\n    const node = treeData.find(n => n.id === nodeId);\n    if (!node || visited.has(nodeId)) return;\n    visited.add(nodeId);\n\n    // Traverse children\n    for (const childId of node.children) {\n      await postorderTraversal(childId, visited, result);\n    }\n    if (isStopRequested.current) return;\n\n    // Visit current node\n    result.push(node.value);\n    setTreeTraversal([...result]);\n    await sleep(500);\n  };\n\n  // Start sorting based on algorithm\n  const startSorting = async algorithm => {\n    if (isSorting) {\n      alert(\"Sorting is already in progress!\");\n      return;\n    }\n    if (!array || array.length === 0) {\n      alert(\"Please generate an array first!\");\n      return;\n    }\n    switch (algorithm) {\n      case \"bubble\":\n        await bubbleSort();\n        break;\n      case \"insertion\":\n        await insertionSort();\n        break;\n      case \"selection\":\n        await selectionSort();\n        break;\n      case \"quick\":\n        await quickSort();\n        break;\n      case \"merge\":\n        await mergeSort();\n        break;\n      case \"heap\":\n        await heapSort();\n        break;\n      case \"shell\":\n        await shellSort();\n        break;\n      default:\n        break;\n    }\n  };\n  const renderSortingSection = () => /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"sorting\",\n    className: \"section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: \"Sorting Algorithms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"section-subtitle\",\n        children: \"Visualize different sorting algorithms in action\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 796,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"control-label\",\n            children: \"Array Size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"5\",\n            max: \"50\",\n            value: numBars,\n            onChange: e => updateBarCount(e.target.value),\n            disabled: isSorting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"control-label\",\n            children: numBars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"algorithm-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('quick'),\n          disabled: isSorting,\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('bubble'),\n          disabled: isSorting,\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('insertion'),\n          disabled: isSorting,\n          children: \"Insertion Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 832,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('selection'),\n          disabled: isSorting,\n          children: \"Selection Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('heap'),\n          disabled: isSorting,\n          children: \"Heap Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('merge'),\n          disabled: isSorting,\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => startSorting('shell'),\n          disabled: isSorting,\n          children: \"Shell Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 817,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: generateArray,\n          disabled: isSorting,\n          children: \"Generate Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: stopSorting,\n          disabled: !isSorting,\n          children: \"Stop Sorting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetVisualization,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 876,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar-container\",\n      children: array.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `bar ${barStates[index] || ''}`,\n        style: {\n          height: `${value}px`\n        },\n        children: value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 882,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 795,\n    columnNumber: 5\n  }, this);\n  const renderBfsSection = () => /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"bfs\",\n    className: \"section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: \"Breadth-First Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"section-subtitle\",\n        children: \"Visualize BFS pathfinding on a grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 900,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: bfs,\n          disabled: isBfsRunning,\n          children: \"Start BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 905,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: () => {\n            isStopRequested.current = true;\n            setIsBfsRunning(false);\n          },\n          disabled: !isBfsRunning,\n          children: \"Stop BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: () => {\n            initializeBfsGrid();\n            setBfsPath([]);\n            setBfsVisited([]);\n          },\n          children: \"Reset Grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 922,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 903,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bfs-grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bfs-grid\",\n        children: bfsGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bfs-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `bfs-cell ${cell.isWall ? 'wall' : cell.isStart ? 'start' : cell.isEnd ? 'end' : cell.isVisited ? 'visited' : bfsPath.some(p => p.row === rowIndex && p.col === colIndex) ? 'path' : ''}`,\n            children: [cell.isStart && 'S', cell.isEnd && 'E']\n          }, `${rowIndex}-${colIndex}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 938,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 936,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 935,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 960,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-items\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color start-color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 963,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-text\",\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 964,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 962,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color end-color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 967,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-text\",\n            children: \"End\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 968,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 966,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color wall-color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 971,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-text\",\n            children: \"Wall\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 972,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 970,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color visited-color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 975,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-text\",\n            children: \"Visited\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 976,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 974,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color path-color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 979,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-text\",\n            children: \"Path\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 980,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 978,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 961,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 959,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 897,\n    columnNumber: 5\n  }, this);\n  const renderRecursiveSection = () => /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"recursive\",\n    className: \"section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: \"Recursive Binary Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 990,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"section-subtitle\",\n        children: \"Visualize recursive binary search algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"control-label\",\n            children: \"Target Value:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 997,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: recursiveTarget,\n            onChange: e => setRecursiveTarget(parseInt(e.target.value) || 0),\n            disabled: isRecursiveRunning,\n            min: \"1\",\n            max: \"100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 998,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 996,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 995,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: startRecursiveSearch,\n          disabled: isRecursiveRunning,\n          children: \"Start Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: () => {\n            isStopRequested.current = true;\n            setIsRecursiveRunning(false);\n          },\n          disabled: !isRecursiveRunning,\n          children: \"Stop Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1017,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: () => {\n            generateRecursiveArray();\n            setRecursiveSteps([]);\n            setRecursiveResult(null);\n          },\n          children: \"New Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1027,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 994,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-array\",\n      children: recursiveArray.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `search-element ${recursiveSteps.length > 0 && recursiveSteps[recursiveSteps.length - 1].mid === index ? 'searching' : recursiveSteps.some(step => step.left <= index && index <= step.right) ? 'searched' : recursiveResult && recursiveResult.found && recursiveResult.index === index ? 'found' : ''}`,\n        children: value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1040,\n      columnNumber: 7\n    }, this), recursiveSteps.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Search Steps:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-steps\",\n        children: recursiveSteps.map((step, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"step-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Step \", index + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1062,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Left: \", step.left, \", Right: \", step.right, \", Mid: \", step.mid]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1063,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Value at mid: \", step.value]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1064,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1061,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1059,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 9\n    }, this), recursiveResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `result-display ${recursiveResult.found ? 'result-success' : 'result-error'}`,\n      children: recursiveResult.found ? `Found ${recursiveTarget} at index ${recursiveResult.index}` : `${recursiveTarget} not found in the array`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1072,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 988,\n    columnNumber: 5\n  }, this);\n  const renderTreeSection = () => /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"tree\",\n    className: \"section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: \"Tree Traversal Algorithms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"section-subtitle\",\n        children: \"Visualize different tree traversal methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1086,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1084,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"control-label\",\n            children: \"Tree Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1092,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: treeType,\n            onChange: e => setTreeType(e.target.value),\n            disabled: isTreeRunning,\n            className: \"tree-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"binary\",\n              children: \"Binary Tree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1099,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"general\",\n              children: \"General Tree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1100,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1093,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1091,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"algorithm-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => traverseTree('inorder'),\n          disabled: isTreeRunning,\n          children: \"Inorder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => traverseTree('preorder'),\n          disabled: isTreeRunning,\n          children: \"Preorder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"algorithm-btn\",\n          onClick: () => traverseTree('postorder'),\n          disabled: isTreeRunning,\n          children: \"Postorder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: () => {\n            isStopRequested.current = true;\n            setIsTreeRunning(false);\n          },\n          disabled: !isTreeRunning,\n          children: \"Stop Traversal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: () => {\n            setTreeTraversal([]);\n          },\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1089,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-visualization\",\n        children: treeData.map(node => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-node\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `node-value ${treeTraversal.includes(node.value) ? 'traversed' : ''}`,\n            children: node.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1155,\n            columnNumber: 15\n          }, this), node.children.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-children\",\n            children: node.children.map(childId => {\n              const childNode = treeData.find(n => n.id === childId);\n              return childNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"child-node\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"connection-line\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1166,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `node-value ${treeTraversal.includes(childNode.value) ? 'traversed' : ''}`,\n                  children: childNode.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1167,\n                  columnNumber: 25\n                }, this)]\n              }, childId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1165,\n                columnNumber: 23\n              }, this) : null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1161,\n            columnNumber: 17\n          }, this)]\n        }, node.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1154,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1151,\n      columnNumber: 7\n    }, this), treeTraversal.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"traversal-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Traversal Order:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"traversal-sequence\",\n        children: treeTraversal.map((value, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"traversal-item\",\n          children: [value, index < treeTraversal.length - 1 ? ' → ' : '']\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1187,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1185,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1183,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1083,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: `navbar ${navbarHidden ? 'navbar-hidden' : 'navbar-visible'} ${navbarScrolled ? 'navbar-scrolled' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"nav-brand\",\n          children: \"AL-GOTH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"nav-menu\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#sorting\",\n              className: `nav-link ${currentSection === 'sorting' ? 'active' : ''}`,\n              onClick: e => {\n                e.preventDefault();\n                setCurrentSection('sorting');\n              },\n              children: \"Sorting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1205,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#searching\",\n              className: `nav-link ${currentSection === 'searching' ? 'active' : ''}`,\n              onClick: e => {\n                e.preventDefault();\n                setCurrentSection('searching');\n              },\n              children: \"Searching\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1217,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#bfs\",\n              className: `nav-link ${currentSection === 'bfs' ? 'active' : ''}`,\n              onClick: e => {\n                e.preventDefault();\n                setCurrentSection('bfs');\n              },\n              children: \"BFS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1229,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#recursive\",\n              className: `nav-link ${currentSection === 'recursive' ? 'active' : ''}`,\n              onClick: e => {\n                e.preventDefault();\n                setCurrentSection('recursive');\n              },\n              children: \"Recursive\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1241,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#tree\",\n              className: `nav-link ${currentSection === 'tree' ? 'active' : ''}`,\n              onClick: e => {\n                e.preventDefault();\n                setCurrentSection('tree');\n              },\n              children: \"Tree\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1253,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1252,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [currentSection === 'sorting' && renderSortingSection(), currentSection === 'searching' && /*#__PURE__*/_jsxDEV(SearchVisualizer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1271,\n        columnNumber: 44\n      }, this), currentSection === 'bfs' && renderBfsSection(), currentSection === 'recursive' && renderRecursiveSection(), currentSection === 'tree' && renderTreeSection()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1269,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1198,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+EFRRxSZGA1fSVxV8Y5S2QKXmEY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","SearchVisualizer","Navbar","jsxDEV","_jsxDEV","sleep","ms","Promise","resolve","setTimeout","App","_s","currentSection","setCurrentSection","array","setArray","numBars","setNumBars","isSorting","setIsSorting","barStates","setBarStates","bfsGrid","setBfsGrid","bfsStart","setBfsStart","row","col","bfsEnd","setBfsEnd","bfsPath","setBfsPath","isBfsRunning","setIsBfsRunning","bfsVisited","setBfsVisited","recursiveArray","setRecursiveArray","recursiveTarget","setRecursiveTarget","isRecursiveRunning","setIsRecursiveRunning","recursiveSteps","setRecursiveSteps","recursiveResult","setRecursiveResult","treeData","setTreeData","treeTraversal","setTreeTraversal","isTreeRunning","setIsTreeRunning","treeType","setTreeType","navbarHidden","setNavbarHidden","navbarScrolled","setNavbarScrolled","isStopRequested","lastScrollTop","ticking","updateNavbar","scrollTop","window","pageYOffset","document","documentElement","requestTick","requestAnimationFrame","addEventListener","removeEventListener","generateArray","newArray","i","push","Math","floor","random","initializeBfsGrid","generateRecursiveArray","generateTreeData","updateBarCount","value","parseInt","stopSorting","current","resetVisualization","bubbleSort","newBarStates","length","j","insertionSort","key","k","selectionSort","minIdx","quickSort","quickSortHelper","arr","low","high","pi","partition","pivot","prev","mergeSort","mergeSortHelper","start","end","mid","merge","left","slice","right","heapSort","n","heapify","largest","l","r","shellSort","gap","temp","grid","isWall","isStart","isEnd","isVisited","isPath","bfs","map","cell","queue","path","visited","Set","directions","shift","has","add","dr","dc","newRow","newCol","sort","a","b","binarySearchRecursive","target","steps","currentStep","found","index","startRecursiveSearch","tree","id","children","traverseTree","type","result","inorderTraversal","preorderTraversal","postorderTraversal","nodeId","node","find","childId","startSorting","algorithm","alert","renderSortingSection","className","fileName","_jsxFileName","lineNumber","columnNumber","min","max","onChange","e","disabled","onClick","style","height","renderBfsSection","rowIndex","colIndex","some","p","renderRecursiveSection","step","renderTreeSection","includes","childNode","href","preventDefault","_c","$RefreshReg$"],"sources":["A:/Algorithm Visualiser/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport SearchVisualizer from './SearchVisualizer';\r\nimport Navbar from './Navbar';\r\n\r\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nfunction App() {\r\n  const [currentSection, setCurrentSection] = useState('sorting');\r\n  const [array, setArray] = useState([]);\r\n  const [numBars, setNumBars] = useState(15);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [barStates, setBarStates] = useState({});\r\n  \r\n  // BFS states\r\n  const [bfsGrid, setBfsGrid] = useState([]);\r\n  const [bfsStart, setBfsStart] = useState({ row: 0, col: 0 });\r\n  const [bfsEnd, setBfsEnd] = useState({ row: 4, col: 4 });\r\n  const [bfsPath, setBfsPath] = useState([]);\r\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\r\n  const [bfsVisited, setBfsVisited] = useState([]);\r\n  \r\n  // Recursive states\r\n  const [recursiveArray, setRecursiveArray] = useState([]);\r\n  const [recursiveTarget, setRecursiveTarget] = useState(50);\r\n  const [isRecursiveRunning, setIsRecursiveRunning] = useState(false);\r\n  const [recursiveSteps, setRecursiveSteps] = useState([]);\r\n  const [recursiveResult, setRecursiveResult] = useState(null);\r\n  \r\n  // Tree states\r\n  const [treeData, setTreeData] = useState([]);\r\n  const [treeTraversal, setTreeTraversal] = useState([]);\r\n  const [isTreeRunning, setIsTreeRunning] = useState(false);\r\n  const [treeType, setTreeType] = useState('binary');\r\n  \r\n  // Navbar scroll states\r\n  const [navbarHidden, setNavbarHidden] = useState(false);\r\n  const [navbarScrolled, setNavbarScrolled] = useState(false);\r\n  \r\n  const isStopRequested = useRef(false);\r\n\r\n  // Navbar scroll animation effect\r\n  useEffect(() => {\r\n    let lastScrollTop = 0;\r\n    let ticking = false;\r\n\r\n    const updateNavbar = () => {\r\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n      \r\n      if (scrollTop > lastScrollTop && scrollTop > 100) {\r\n        // Scrolling down & past threshold\r\n        setNavbarHidden(true);\r\n      } else if (scrollTop < lastScrollTop || scrollTop <= 100) {\r\n        // Scrolling up or at top\r\n        setNavbarHidden(false);\r\n      }\r\n      \r\n      // Add scrolled state for enhanced styling\r\n      setNavbarScrolled(scrollTop > 50);\r\n      \r\n      lastScrollTop = scrollTop;\r\n      ticking = false;\r\n    };\r\n\r\n    const requestTick = () => {\r\n      if (!ticking) {\r\n        requestAnimationFrame(updateNavbar);\r\n        ticking = true;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', requestTick);\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      window.removeEventListener('scroll', requestTick);\r\n    };\r\n  }, []);\r\n\r\n  // Generate random array\r\n  const generateArray = useCallback(() => {\r\n    const newArray = [];\r\n    for (let i = 0; i < numBars; i++) {\r\n      newArray.push(Math.floor(Math.random() * 200) + 20);\r\n    }\r\n    setArray(newArray);\r\n    setBarStates({});\r\n  }, [numBars]);\r\n\r\n  // Initialize array on component mount\r\n  useEffect(() => {\r\n    generateArray();\r\n  }, [generateArray]);\r\n\r\n  // Initialize BFS grid\r\n  useEffect(() => {\r\n    initializeBfsGrid();\r\n  }, []);\r\n\r\n  // Initialize recursive array\r\n  useEffect(() => {\r\n    generateRecursiveArray();\r\n  }, []);\r\n\r\n  // Initialize tree data\r\n  useEffect(() => {\r\n    generateTreeData();\r\n  }, [treeType]);\r\n\r\n  // Update bar count\r\n  const updateBarCount = (value) => {\r\n    setNumBars(parseInt(value));\r\n  };\r\n\r\n  // Stop sorting\r\n  const stopSorting = () => {\r\n    isStopRequested.current = true;\r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Reset visualization\r\n  const resetVisualization = () => {\r\n    isStopRequested.current = true;\r\n    setIsSorting(false);\r\n    setBarStates({});\r\n    setTimeout(() => {\r\n      generateArray();\r\n      isStopRequested.current = false;\r\n    }, 100);\r\n  };\r\n\r\n  // Bubble Sort\r\n  const bubbleSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    const newBarStates = {};\r\n\r\n    for (let i = 0; i < newArray.length - 1 && !isStopRequested.current; i++) {\r\n      for (let j = 0; j < newArray.length - i - 1 && !isStopRequested.current; j++) {\r\n        newBarStates[j] = 'comparing';\r\n        newBarStates[j + 1] = 'comparing';\r\n        setBarStates({ ...newBarStates });\r\n        \r\n        await sleep(100);\r\n        \r\n        if (isStopRequested.current) break;\r\n\r\n        if (newArray[j] > newArray[j + 1]) {\r\n          [newArray[j], newArray[j + 1]] = [newArray[j + 1], newArray[j]];\r\n          setArray([...newArray]);\r\n        }\r\n\r\n        newBarStates[j] = '';\r\n        newBarStates[j + 1] = '';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n      if (!isStopRequested.current) {\r\n        newBarStates[newArray.length - 1 - i] = 'sorted';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      newBarStates[0] = 'sorted';\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Insertion Sort\r\n  const insertionSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    const newBarStates = {};\r\n\r\n    for (let i = 1; i < newArray.length && !isStopRequested.current; i++) {\r\n      let key = newArray[i];\r\n      let j = i - 1;\r\n\r\n      newBarStates[i] = 'current';\r\n      setBarStates({ ...newBarStates });\r\n      await sleep(150);\r\n      \r\n      if (isStopRequested.current) break;\r\n\r\n      while (j >= 0 && newArray[j] > key && !isStopRequested.current) {\r\n        newBarStates[j] = 'comparing';\r\n        setBarStates({ ...newBarStates });\r\n        \r\n        newArray[j + 1] = newArray[j];\r\n        setArray([...newArray]);\r\n        await sleep(100);\r\n        \r\n        if (isStopRequested.current) break;\r\n        \r\n        newBarStates[j] = '';\r\n        setBarStates({ ...newBarStates });\r\n        j--;\r\n      }\r\n\r\n      if (!isStopRequested.current) {\r\n        newArray[j + 1] = key;\r\n        setArray([...newArray]);\r\n        newBarStates[i] = '';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      for (let k = 0; k < newArray.length; k++) {\r\n        newBarStates[k] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Selection Sort\r\n  const selectionSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    const newBarStates = {};\r\n\r\n    for (let i = 0; i < newArray.length && !isStopRequested.current; i++) {\r\n      let minIdx = i;\r\n      newBarStates[minIdx] = 'current';\r\n      setBarStates({ ...newBarStates });\r\n\r\n      for (let j = i + 1; j < newArray.length && !isStopRequested.current; j++) {\r\n        newBarStates[j] = 'comparing';\r\n        setBarStates({ ...newBarStates });\r\n        await sleep(100);\r\n        \r\n        if (isStopRequested.current) break;\r\n\r\n        if (newArray[j] < newArray[minIdx]) {\r\n          newBarStates[minIdx] = '';\r\n          minIdx = j;\r\n          newBarStates[minIdx] = 'current';\r\n          setBarStates({ ...newBarStates });\r\n        } else {\r\n          newBarStates[j] = '';\r\n          setBarStates({ ...newBarStates });\r\n        }\r\n      }\r\n\r\n      if (!isStopRequested.current && minIdx !== i) {\r\n        [newArray[i], newArray[minIdx]] = [newArray[minIdx], newArray[i]];\r\n        setArray([...newArray]);\r\n      }\r\n\r\n      if (!isStopRequested.current) {\r\n        newBarStates[i] = 'sorted';\r\n        newBarStates[minIdx] = '';\r\n        setBarStates({ ...newBarStates });\r\n      }\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  // Quick Sort\r\n  const quickSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    await quickSortHelper(newArray, 0, newArray.length - 1);\r\n    \r\n    if (!isStopRequested.current) {\r\n      const newBarStates = {};\r\n      for (let i = 0; i < newArray.length; i++) {\r\n        newBarStates[i] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  const quickSortHelper = async (arr, low, high) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    if (low < high && !isStopRequested.current) {\r\n      let pi = await partition(arr, low, high);\r\n      await quickSortHelper(arr, low, pi - 1);\r\n      await quickSortHelper(arr, pi + 1, high);\r\n    }\r\n  };\r\n\r\n  const partition = async (arr, low, high) => {\r\n    if (isStopRequested.current) return low;\r\n    \r\n    let pivot = arr[high];\r\n    let i = low - 1;\r\n\r\n    for (let j = low; j < high && !isStopRequested.current; j++) {\r\n      setBarStates(prev => ({ ...prev, [j]: 'comparing', [high]: 'current' }));\r\n      await sleep(150);\r\n      \r\n      if (isStopRequested.current) break;\r\n\r\n      if (arr[j] < pivot) {\r\n        i++;\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n        setArray([...arr]);\r\n      }\r\n\r\n      setBarStates(prev => ({ ...prev, [j]: '' }));\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\r\n      setArray([...arr]);\r\n      setBarStates(prev => ({ ...prev, [high]: '' }));\r\n    }\r\n\r\n    return i + 1;\r\n  };\r\n\r\n  // Merge Sort\r\n  const mergeSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    await mergeSortHelper(newArray, 0, newArray.length - 1);\r\n    \r\n    if (!isStopRequested.current) {\r\n      const newBarStates = {};\r\n      for (let i = 0; i < newArray.length; i++) {\r\n        newBarStates[i] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  const mergeSortHelper = async (arr, start, end) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    if (start < end && !isStopRequested.current) {\r\n      let mid = Math.floor((start + end) / 2);\r\n      await mergeSortHelper(arr, start, mid);\r\n      await mergeSortHelper(arr, mid + 1, end);\r\n      await merge(arr, start, mid, end);\r\n    }\r\n  };\r\n\r\n  const merge = async (arr, start, mid, end) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    let left = arr.slice(start, mid + 1);\r\n    let right = arr.slice(mid + 1, end + 1);\r\n\r\n    let i = 0, j = 0, k = start;\r\n\r\n    while (i < left.length && j < right.length && !isStopRequested.current) {\r\n      setBarStates(prev => ({ ...prev, [k]: 'comparing' }));\r\n      await sleep(150);\r\n      \r\n      if (isStopRequested.current) break;\r\n\r\n      if (left[i] <= right[j]) {\r\n        arr[k] = left[i++];\r\n      } else {\r\n        arr[k] = right[j++];\r\n      }\r\n\r\n      setArray([...arr]);\r\n      setBarStates(prev => ({ ...prev, [k]: '' }));\r\n      k++;\r\n    }\r\n\r\n    while (i < left.length && !isStopRequested.current) {\r\n      arr[k] = left[i++];\r\n      setArray([...arr]);\r\n      k++;\r\n      await sleep(100);\r\n    }\r\n\r\n    while (j < right.length && !isStopRequested.current) {\r\n      arr[k] = right[j++];\r\n      setArray([...arr]);\r\n      k++;\r\n      await sleep(100);\r\n    }\r\n  };\r\n\r\n  // Heap Sort\r\n  const heapSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    let n = newArray.length;\r\n\r\n    // Build heap\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0 && !isStopRequested.current; i--) {\r\n      await heapify(newArray, n, i);\r\n    }\r\n\r\n    // Extract elements from heap\r\n    for (let i = n - 1; i > 0 && !isStopRequested.current; i--) {\r\n      [newArray[0], newArray[i]] = [newArray[i], newArray[0]];\r\n      setArray([...newArray]);\r\n\r\n      if (!isStopRequested.current) {\r\n        setBarStates(prev => ({ ...prev, [i]: 'sorted' }));\r\n        await heapify(newArray, i, 0);\r\n      }\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      setBarStates(prev => ({ ...prev, [0]: 'sorted' }));\r\n    }\r\n    \r\n    setIsSorting(false);\r\n  };\r\n\r\n  const heapify = async (arr, n, i) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    let largest = i;\r\n    let l = 2 * i + 1;\r\n    let r = 2 * i + 2;\r\n\r\n    if (l < n && arr[l] > arr[largest]) largest = l;\r\n    if (r < n && arr[r] > arr[largest]) largest = r;\r\n\r\n    if (largest !== i && !isStopRequested.current) {\r\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\r\n      setArray([...arr]);\r\n      \r\n      setBarStates(prev => ({ \r\n        ...prev, \r\n        [i]: 'comparing', \r\n        [largest]: 'comparing' \r\n      }));\r\n\r\n      await sleep(150);\r\n      \r\n      if (!isStopRequested.current) {\r\n        setBarStates(prev => ({ \r\n          ...prev, \r\n          [i]: '', \r\n          [largest]: '' \r\n        }));\r\n        await heapify(arr, n, largest);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Shell Sort\r\n  const shellSort = async () => {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    isStopRequested.current = false;\r\n\r\n    const newArray = [...array];\r\n    let n = newArray.length;\r\n    let gap = Math.floor(n / 2);\r\n\r\n    while (gap > 0 && !isStopRequested.current) {\r\n      for (let i = gap; i < n && !isStopRequested.current; i++) {\r\n        let temp = newArray[i];\r\n        let j = i;\r\n\r\n        setBarStates(prev => ({ ...prev, [i]: 'current' }));\r\n        await sleep(150);\r\n\r\n        while (j >= gap && newArray[j - gap] > temp && !isStopRequested.current) {\r\n          setBarStates(prev => ({ ...prev, [j - gap]: 'comparing' }));\r\n          newArray[j] = newArray[j - gap];\r\n          setArray([...newArray]);\r\n          await sleep(100);\r\n          setBarStates(prev => ({ ...prev, [j - gap]: '' }));\r\n          j -= gap;\r\n        }\r\n\r\n        if (!isStopRequested.current) {\r\n          newArray[j] = temp;\r\n          setArray([...newArray]);\r\n          setBarStates(prev => ({ ...prev, [i]: '' }));\r\n        }\r\n      }\r\n      gap = Math.floor(gap / 2);\r\n    }\r\n\r\n    if (!isStopRequested.current) {\r\n      const newBarStates = {};\r\n      for (let k = 0; k < newArray.length; k++) {\r\n        newBarStates[k] = 'sorted';\r\n      }\r\n      setBarStates({ ...newBarStates });\r\n    }\r\n\r\n    setIsSorting(false);\r\n  };\r\n\r\n  // BFS Functions\r\n  const initializeBfsGrid = () => {\r\n    const grid = [];\r\n    for (let i = 0; i < 8; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < 8; j++) {\r\n        row.push({\r\n          row: i,\r\n          col: j,\r\n          isWall: Math.random() < 0.3,\r\n          isStart: i === 0 && j === 0,\r\n          isEnd: i === 4 && j === 4,\r\n          isVisited: false,\r\n          isPath: false\r\n        });\r\n      }\r\n      grid.push(row);\r\n    }\r\n    setBfsGrid(grid);\r\n  };\r\n\r\n  const bfs = async () => {\r\n    if (isBfsRunning) return;\r\n    setIsBfsRunning(true);\r\n    isStopRequested.current = false;\r\n    \r\n    const grid = bfsGrid.map(row => row.map(cell => ({ ...cell })));\r\n    const queue = [{ row: bfsStart.row, col: bfsStart.col, path: [] }];\r\n    const visited = new Set();\r\n    const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\r\n    \r\n    while (queue.length > 0 && !isStopRequested.current) {\r\n      const { row, col, path } = queue.shift();\r\n      const key = `${row},${col}`;\r\n      \r\n      if (visited.has(key)) continue;\r\n      visited.add(key);\r\n      \r\n      // Mark as visited\r\n      grid[row][col].isVisited = true;\r\n      setBfsGrid([...grid]);\r\n      setBfsVisited([...visited]);\r\n      await sleep(100);\r\n      \r\n      if (isStopRequested.current) break;\r\n      \r\n      // Check if we reached the end\r\n      if (row === bfsEnd.row && col === bfsEnd.col) {\r\n        setBfsPath(path);\r\n        break;\r\n      }\r\n      \r\n      // Explore neighbors\r\n      for (const [dr, dc] of directions) {\r\n        const newRow = row + dr;\r\n        const newCol = col + dc;\r\n        \r\n        if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8 &&\r\n            !grid[newRow][newCol].isWall && !visited.has(`${newRow},${newCol}`)) {\r\n          queue.push({\r\n            row: newRow,\r\n            col: newCol,\r\n            path: [...path, { row, col }]\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    setIsBfsRunning(false);\r\n  };\r\n\r\n  // Recursive Functions\r\n  const generateRecursiveArray = () => {\r\n    const arr = [];\r\n    for (let i = 0; i < 10; i++) {\r\n      arr.push(Math.floor(Math.random() * 100) + 1);\r\n    }\r\n    setRecursiveArray(arr.sort((a, b) => a - b));\r\n  };\r\n\r\n  const binarySearchRecursive = async (arr, target, left = 0, right = arr.length - 1, steps = []) => {\r\n    if (isStopRequested.current) return -1;\r\n    \r\n    const mid = Math.floor((left + right) / 2);\r\n    const currentStep = {\r\n      left,\r\n      right,\r\n      mid,\r\n      value: arr[mid],\r\n      target\r\n    };\r\n    \r\n    setRecursiveSteps([...steps, currentStep]);\r\n    await sleep(500);\r\n    \r\n    if (isStopRequested.current) return -1;\r\n    \r\n    if (left > right) {\r\n      setRecursiveResult({ found: false, index: -1 });\r\n      return -1;\r\n    }\r\n    \r\n    if (arr[mid] === target) {\r\n      setRecursiveResult({ found: true, index: mid });\r\n      return mid;\r\n    }\r\n    \r\n    if (arr[mid] > target) {\r\n      return await binarySearchRecursive(arr, target, left, mid - 1, [...steps, currentStep]);\r\n    } else {\r\n      return await binarySearchRecursive(arr, target, mid + 1, right, [...steps, currentStep]);\r\n    }\r\n  };\r\n\r\n  const startRecursiveSearch = async () => {\r\n    if (isRecursiveRunning) return;\r\n    setIsRecursiveRunning(true);\r\n    isStopRequested.current = false;\r\n    setRecursiveSteps([]);\r\n    setRecursiveResult(null);\r\n    \r\n    await binarySearchRecursive(recursiveArray, recursiveTarget);\r\n    setIsRecursiveRunning(false);\r\n  };\r\n\r\n  // Tree Functions\r\n  const generateTreeData = () => {\r\n    if (treeType === 'binary') {\r\n      const tree = [\r\n        { id: 1, value: 50, children: [2, 3] },\r\n        { id: 2, value: 25, children: [4, 5] },\r\n        { id: 3, value: 75, children: [6, 7] },\r\n        { id: 4, value: 12, children: [] },\r\n        { id: 5, value: 37, children: [] },\r\n        { id: 6, value: 62, children: [] },\r\n        { id: 7, value: 87, children: [] }\r\n      ];\r\n      setTreeData(tree);\r\n    } else {\r\n      const tree = [\r\n        { id: 1, value: 'A', children: [2, 3, 4] },\r\n        { id: 2, value: 'B', children: [5, 6] },\r\n        { id: 3, value: 'C', children: [7] },\r\n        { id: 4, value: 'D', children: [] },\r\n        { id: 5, value: 'E', children: [] },\r\n        { id: 6, value: 'F', children: [] },\r\n        { id: 7, value: 'G', children: [] }\r\n      ];\r\n      setTreeData(tree);\r\n    }\r\n  };\r\n\r\n  const traverseTree = async (type) => {\r\n    if (isTreeRunning) return;\r\n    setIsTreeRunning(true);\r\n    isStopRequested.current = false;\r\n    setTreeTraversal([]);\r\n    \r\n    const visited = new Set();\r\n    const result = [];\r\n    \r\n    if (type === 'inorder') {\r\n      await inorderTraversal(1, visited, result);\r\n    } else if (type === 'preorder') {\r\n      await preorderTraversal(1, visited, result);\r\n    } else if (type === 'postorder') {\r\n      await postorderTraversal(1, visited, result);\r\n    }\r\n    \r\n    setIsTreeRunning(false);\r\n  };\r\n\r\n  const inorderTraversal = async (nodeId, visited, result) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    const node = treeData.find(n => n.id === nodeId);\r\n    if (!node || visited.has(nodeId)) return;\r\n    \r\n    visited.add(nodeId);\r\n    \r\n    // Traverse left subtree\r\n    if (node.children[0]) {\r\n      await inorderTraversal(node.children[0], visited, result);\r\n    }\r\n    \r\n    // Visit current node\r\n    result.push(node.value);\r\n    setTreeTraversal([...result]);\r\n    await sleep(500);\r\n    \r\n    if (isStopRequested.current) return;\r\n    \r\n    // Traverse right subtree\r\n    if (node.children[1]) {\r\n      await inorderTraversal(node.children[1], visited, result);\r\n    }\r\n  };\r\n\r\n  const preorderTraversal = async (nodeId, visited, result) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    const node = treeData.find(n => n.id === nodeId);\r\n    if (!node || visited.has(nodeId)) return;\r\n    \r\n    visited.add(nodeId);\r\n    \r\n    // Visit current node\r\n    result.push(node.value);\r\n    setTreeTraversal([...result]);\r\n    await sleep(500);\r\n    \r\n    if (isStopRequested.current) return;\r\n    \r\n    // Traverse children\r\n    for (const childId of node.children) {\r\n      await preorderTraversal(childId, visited, result);\r\n    }\r\n  };\r\n\r\n  const postorderTraversal = async (nodeId, visited, result) => {\r\n    if (isStopRequested.current) return;\r\n    \r\n    const node = treeData.find(n => n.id === nodeId);\r\n    if (!node || visited.has(nodeId)) return;\r\n    \r\n    visited.add(nodeId);\r\n    \r\n    // Traverse children\r\n    for (const childId of node.children) {\r\n      await postorderTraversal(childId, visited, result);\r\n    }\r\n    \r\n    if (isStopRequested.current) return;\r\n    \r\n    // Visit current node\r\n    result.push(node.value);\r\n    setTreeTraversal([...result]);\r\n    await sleep(500);\r\n  };\r\n\r\n  // Start sorting based on algorithm\r\n  const startSorting = async (algorithm) => {\r\n    if (isSorting) {\r\n      alert(\"Sorting is already in progress!\");\r\n      return;\r\n    }\r\n    \r\n    if (!array || array.length === 0) {\r\n      alert(\"Please generate an array first!\");\r\n      return;\r\n    }\r\n    \r\n    switch (algorithm) {\r\n      case \"bubble\":\r\n        await bubbleSort();\r\n        break;\r\n      case \"insertion\":\r\n        await insertionSort();\r\n        break;\r\n      case \"selection\":\r\n        await selectionSort();\r\n        break;\r\n      case \"quick\":\r\n        await quickSort();\r\n        break;\r\n      case \"merge\":\r\n        await mergeSort();\r\n        break;\r\n      case \"heap\":\r\n        await heapSort();\r\n        break;\r\n      case \"shell\":\r\n        await shellSort();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const renderSortingSection = () => (\r\n    <section id=\"sorting\" className=\"section\">\r\n      <div className=\"section-header\">\r\n        <h2 className=\"section-title\">Sorting Algorithms</h2>\r\n        <p className=\"section-subtitle\">Visualize different sorting algorithms in action</p>\r\n      </div>\r\n\r\n      <div className=\"controls-section\">\r\n        <div className=\"controls-row\">\r\n          <div className=\"control-group\">\r\n            <label className=\"control-label\">Array Size:</label>\r\n            <input \r\n              type=\"range\" \r\n              min=\"5\" \r\n              max=\"50\" \r\n              value={numBars} \r\n              onChange={(e) => updateBarCount(e.target.value)}\r\n              disabled={isSorting}\r\n            />\r\n            <span className=\"control-label\">{numBars}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"algorithm-buttons\">\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('quick')} \r\n            disabled={isSorting}\r\n          >\r\n            Quick Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('bubble')} \r\n            disabled={isSorting}\r\n          >\r\n            Bubble Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('insertion')} \r\n            disabled={isSorting}\r\n          >\r\n            Insertion Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('selection')} \r\n            disabled={isSorting}\r\n          >\r\n            Selection Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('heap')} \r\n            disabled={isSorting}\r\n          >\r\n            Heap Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('merge')} \r\n            disabled={isSorting}\r\n          >\r\n            Merge Sort\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => startSorting('shell')} \r\n            disabled={isSorting}\r\n          >\r\n            Shell Sort\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"controls-row\">\r\n          <button className=\"btn btn-primary\" onClick={generateArray} disabled={isSorting}>\r\n            Generate Array\r\n          </button>\r\n          <button className=\"btn btn-secondary\" onClick={stopSorting} disabled={!isSorting}>\r\n            Stop Sorting\r\n          </button>\r\n          <button className=\"btn btn-success\" onClick={resetVisualization}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"bar-container\">\r\n        {array.map((value, index) => (\r\n          <div\r\n            key={index}\r\n            className={`bar ${barStates[index] || ''}`}\r\n            style={{ height: `${value}px` }}\r\n          >\r\n            {value}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n\r\n  const renderBfsSection = () => (\r\n    <section id=\"bfs\" className=\"section\">\r\n      <div className=\"section-header\">\r\n        <h2 className=\"section-title\">Breadth-First Search</h2>\r\n        <p className=\"section-subtitle\">Visualize BFS pathfinding on a grid</p>\r\n      </div>\r\n\r\n      <div className=\"controls-section\">\r\n        <div className=\"controls-row\">\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={bfs}\r\n            disabled={isBfsRunning}\r\n          >\r\n            Start BFS\r\n          </button>\r\n          <button \r\n            className=\"btn btn-secondary\"\r\n            onClick={() => {\r\n              isStopRequested.current = true;\r\n              setIsBfsRunning(false);\r\n            }}\r\n            disabled={!isBfsRunning}\r\n          >\r\n            Stop BFS\r\n          </button>\r\n          <button \r\n            className=\"btn btn-success\"\r\n            onClick={() => {\r\n              initializeBfsGrid();\r\n              setBfsPath([]);\r\n              setBfsVisited([]);\r\n            }}\r\n          >\r\n            Reset Grid\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"bfs-grid-container\">\r\n        <div className=\"bfs-grid\">\r\n          {bfsGrid.map((row, rowIndex) => (\r\n            <div key={rowIndex} className=\"bfs-row\">\r\n              {row.map((cell, colIndex) => (\r\n                <div\r\n                  key={`${rowIndex}-${colIndex}`}\r\n                  className={`bfs-cell ${\r\n                    cell.isWall ? 'wall' :\r\n                    cell.isStart ? 'start' :\r\n                    cell.isEnd ? 'end' :\r\n                    cell.isVisited ? 'visited' :\r\n                    bfsPath.some(p => p.row === rowIndex && p.col === colIndex) ? 'path' : ''\r\n                  }`}\r\n                >\r\n                  {cell.isStart && 'S'}\r\n                  {cell.isEnd && 'E'}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"legend\">\r\n        <h3>Legend</h3>\r\n        <div className=\"legend-items\">\r\n          <div className=\"legend-item\">\r\n            <div className=\"legend-color start-color\"></div>\r\n            <span className=\"legend-text\">Start</span>\r\n          </div>\r\n          <div className=\"legend-item\">\r\n            <div className=\"legend-color end-color\"></div>\r\n            <span className=\"legend-text\">End</span>\r\n          </div>\r\n          <div className=\"legend-item\">\r\n            <div className=\"legend-color wall-color\"></div>\r\n            <span className=\"legend-text\">Wall</span>\r\n          </div>\r\n          <div className=\"legend-item\">\r\n            <div className=\"legend-color visited-color\"></div>\r\n            <span className=\"legend-text\">Visited</span>\r\n          </div>\r\n          <div className=\"legend-item\">\r\n            <div className=\"legend-color path-color\"></div>\r\n            <span className=\"legend-text\">Path</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n\r\n  const renderRecursiveSection = () => (\r\n    <section id=\"recursive\" className=\"section\">\r\n      <div className=\"section-header\">\r\n        <h2 className=\"section-title\">Recursive Binary Search</h2>\r\n        <p className=\"section-subtitle\">Visualize recursive binary search algorithm</p>\r\n      </div>\r\n\r\n      <div className=\"controls-section\">\r\n        <div className=\"controls-row\">\r\n          <div className=\"control-group\">\r\n            <label className=\"control-label\">Target Value:</label>\r\n            <input\r\n              type=\"number\"\r\n              value={recursiveTarget}\r\n              onChange={(e) => setRecursiveTarget(parseInt(e.target.value) || 0)}\r\n              disabled={isRecursiveRunning}\r\n              min=\"1\"\r\n              max=\"100\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"controls-row\">\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={startRecursiveSearch}\r\n            disabled={isRecursiveRunning}\r\n          >\r\n            Start Search\r\n          </button>\r\n          <button \r\n            className=\"btn btn-secondary\"\r\n            onClick={() => {\r\n              isStopRequested.current = true;\r\n              setIsRecursiveRunning(false);\r\n            }}\r\n            disabled={!isRecursiveRunning}\r\n          >\r\n            Stop Search\r\n          </button>\r\n          <button \r\n            className=\"btn btn-success\"\r\n            onClick={() => {\r\n              generateRecursiveArray();\r\n              setRecursiveSteps([]);\r\n              setRecursiveResult(null);\r\n            }}\r\n          >\r\n            New Array\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"search-array\">\r\n        {recursiveArray.map((value, index) => (\r\n          <div\r\n            key={index}\r\n            className={`search-element ${\r\n              recursiveSteps.length > 0 && \r\n              recursiveSteps[recursiveSteps.length - 1].mid === index ? 'searching' :\r\n              recursiveSteps.some(step => step.left <= index && index <= step.right) ? 'searched' :\r\n              recursiveResult && recursiveResult.found && recursiveResult.index === index ? 'found' : ''\r\n            }`}\r\n          >\r\n            {value}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {recursiveSteps.length > 0 && (\r\n        <div className=\"search-info\">\r\n          <h4>Search Steps:</h4>\r\n          <div className=\"search-steps\">\r\n            {recursiveSteps.map((step, index) => (\r\n              <div key={index} className=\"step-info\">\r\n                <span>Step {index + 1}:</span>\r\n                <span>Left: {step.left}, Right: {step.right}, Mid: {step.mid}</span>\r\n                <span>Value at mid: {step.value}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {recursiveResult && (\r\n        <div className={`result-display ${recursiveResult.found ? 'result-success' : 'result-error'}`}>\r\n          {recursiveResult.found \r\n            ? `Found ${recursiveTarget} at index ${recursiveResult.index}`\r\n            : `${recursiveTarget} not found in the array`\r\n          }\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n\r\n  const renderTreeSection = () => (\r\n    <section id=\"tree\" className=\"section\">\r\n      <div className=\"section-header\">\r\n        <h2 className=\"section-title\">Tree Traversal Algorithms</h2>\r\n        <p className=\"section-subtitle\">Visualize different tree traversal methods</p>\r\n      </div>\r\n\r\n      <div className=\"controls-section\">\r\n        <div className=\"controls-row\">\r\n          <div className=\"control-group\">\r\n            <label className=\"control-label\">Tree Type:</label>\r\n            <select\r\n              value={treeType}\r\n              onChange={(e) => setTreeType(e.target.value)}\r\n              disabled={isTreeRunning}\r\n              className=\"tree-select\"\r\n            >\r\n              <option value=\"binary\">Binary Tree</option>\r\n              <option value=\"general\">General Tree</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"algorithm-buttons\">\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => traverseTree('inorder')}\r\n            disabled={isTreeRunning}\r\n          >\r\n            Inorder\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => traverseTree('preorder')}\r\n            disabled={isTreeRunning}\r\n          >\r\n            Preorder\r\n          </button>\r\n          <button \r\n            className=\"algorithm-btn\"\r\n            onClick={() => traverseTree('postorder')}\r\n            disabled={isTreeRunning}\r\n          >\r\n            Postorder\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"controls-row\">\r\n          <button \r\n            className=\"btn btn-secondary\"\r\n            onClick={() => {\r\n              isStopRequested.current = true;\r\n              setIsTreeRunning(false);\r\n            }}\r\n            disabled={!isTreeRunning}\r\n          >\r\n            Stop Traversal\r\n          </button>\r\n          <button \r\n            className=\"btn btn-success\"\r\n            onClick={() => {\r\n              setTreeTraversal([]);\r\n            }}\r\n          >\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"tree-container\">\r\n        <div className=\"tree-visualization\">\r\n          {treeData.map((node) => (\r\n            <div key={node.id} className=\"tree-node\">\r\n              <div className={`node-value ${\r\n                treeTraversal.includes(node.value) ? 'traversed' : ''\r\n              }`}>\r\n                {node.value}\r\n              </div>\r\n              {node.children.length > 0 && (\r\n                <div className=\"node-children\">\r\n                  {node.children.map((childId) => {\r\n                    const childNode = treeData.find(n => n.id === childId);\r\n                    return childNode ? (\r\n                      <div key={childId} className=\"child-node\">\r\n                        <div className=\"connection-line\"></div>\r\n                        <div className={`node-value ${\r\n                          treeTraversal.includes(childNode.value) ? 'traversed' : ''\r\n                        }`}>\r\n                          {childNode.value}\r\n                        </div>\r\n                      </div>\r\n                    ) : null;\r\n                  })}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {treeTraversal.length > 0 && (\r\n        <div className=\"traversal-result\">\r\n          <h4>Traversal Order:</h4>\r\n          <div className=\"traversal-sequence\">\r\n            {treeTraversal.map((value, index) => (\r\n              <span key={index} className=\"traversal-item\">\r\n                {value}{index < treeTraversal.length - 1 ? ' → ' : ''}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {/* Navbar with dynamic classes for scroll animation */}\r\n      <nav className={`navbar ${navbarHidden ? 'navbar-hidden' : 'navbar-visible'} ${navbarScrolled ? 'navbar-scrolled' : ''}`}>\r\n        <div className=\"nav-container\">\r\n          <a href=\"#\" className=\"nav-brand\">AL-GOTH</a>\r\n          <ul className=\"nav-menu\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                href=\"#sorting\" \r\n                className={`nav-link ${currentSection === 'sorting' ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setCurrentSection('sorting');\r\n                }}\r\n              >\r\n                Sorting\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a \r\n                href=\"#searching\" \r\n                className={`nav-link ${currentSection === 'searching' ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setCurrentSection('searching');\r\n                }}\r\n              >\r\n                Searching\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a \r\n                href=\"#bfs\" \r\n                className={`nav-link ${currentSection === 'bfs' ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setCurrentSection('bfs');\r\n                }}\r\n              >\r\n                BFS\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a \r\n                href=\"#recursive\" \r\n                className={`nav-link ${currentSection === 'recursive' ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setCurrentSection('recursive');\r\n                }}\r\n              >\r\n                Recursive\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a \r\n                href=\"#tree\" \r\n                className={`nav-link ${currentSection === 'tree' ? 'active' : ''}`}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setCurrentSection('tree');\r\n                }}\r\n              >\r\n                Tree\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"main-content\">\r\n        {currentSection === 'sorting' && renderSortingSection()}\r\n        {currentSection === 'searching' && <SearchVisualizer />}\r\n        {currentSection === 'bfs' && renderBfsSection()}\r\n        {currentSection === 'recursive' && renderRecursiveSection()}\r\n        {currentSection === 'tree' && renderTreeSection()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}